#version 450
#extension GL_EXT_mesh_shader : require

#include "global_binding.glsl"
#include "node_binding.glsl"
#include "mesh_comp_constants.glsl"
#include "common_util.glsl"

layout(local_size_x = VERTEX_DIMENSION_COUNT, local_size_y = VERTEX_DIMENSION_COUNT, local_size_z = 1) in;
layout(triangles, max_vertices = VERTEX_COUNT, max_primitives = PRIMITIVE_COUNT) out;

layout(location = 0) out VertexOutput {
    vec2 uv;
} vertexOutput[];

void main()
{
    SetMeshOutputsEXT(VERTEX_COUNT, PRIMITIVE_COUNT);

    const vec2 screenSize = globalUBO.screenSize;
    const vec2 inUV = ((gl_GlobalInvocationID.xy - gl_WorkGroupID.xy) * SCALE) / screenSize;

    const vec2 scale = clamp(vec2(nodeUBO.framebufferSize) / vec2(globalUBO.screenSize), 0, 1);
    const vec2 scaledUV = inUV * scale;
    // im reversing the lr and ul from what i'd expect... why!?
    const vec2 nodeUV = mix(nodeUBO.lrUV, nodeUBO.ulUV, inUV);

    float alphaValue = texture(nodeColor, scaledUV).a;
    float depthValue = texture(nodeGBuffer, scaledUV).r;

    vec2 nodeNDC = NDCFromUV(nodeUV);
    vec4 nodeClipPos = ClipPosFromNDC(nodeNDC, depthValue);
    vec3 worldPos = WorldPosFromNodeClipPos(nodeClipPos);
    vec4 globalClipPos = GlobalClipPosFromWorldPos(worldPos);

    vertexOutput[gl_LocalInvocationIndex].uv = inUV;
    gl_MeshVerticesEXT[gl_LocalInvocationIndex].gl_Position = globalClipPos;

    if (gl_LocalInvocationID.x < VERTEX_DIMENSION_COUNT - 1 && gl_LocalInvocationID.y < VERTEX_DIMENSION_COUNT - 1) {
        const uint yOffset = gl_LocalInvocationID.y * VERTEX_DIMENSION_COUNT;
        const uint offsetX = gl_LocalInvocationID.x + yOffset;
        const uint pi = (gl_LocalInvocationID.y * (VERTEX_DIMENSION_COUNT - 1)) + gl_LocalInvocationID.x;
        gl_PrimitiveTriangleIndicesEXT[pi] = uvec3(offsetX, offsetX + 1, offsetX + VERTEX_DIMENSION_COUNT);
        gl_PrimitiveTriangleIndicesEXT[pi + HALF_PRIMITIVE_COUNT] = uvec3(offsetX + 1, offsetX + VERTEX_DIMENSION_COUNT + 1, offsetX + VERTEX_DIMENSION_COUNT);
    }
}