#version 450

#include "global_binding.glsl"
#include "compute_node_binding.glsl"

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

layout (set = 1, binding = 5, r32ui) uniform uimage2D outputAtomic;
layout (set = 1, binding = 6) uniform writeonly image2D outputColor;

vec3 unpackColor(uint packedData) {
    uint colorData = packedData & 0xFFFFu;

    uint r = (colorData >> 11) & 0x1Fu;
    uint g = (colorData >> 5) & 0x3Fu;
    uint b = colorData & 0x1Fu;

    vec3 color;
    color.r = float(r) / 31.0;
    color.g = float(g) / 63.0;
    color.b = float(b) / 31.0;

    return color;
}

void main()
{
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    const uint data = imageLoad(outputAtomic, coord).r;
    const float dataf = data;
    const vec3 color = unpackColor(data);
    const vec3 colorSRGB = pow(color.rgb, vec3(1.0 / 2.2));
    imageStore(outputColor, coord, vec4(colorSRGB, 1));

    // reset atomic buffer for next frame
    uint maxValue = -1;
    imageStore(outputAtomic, coord, uvec4(maxValue, 0, 0, 0));
}
