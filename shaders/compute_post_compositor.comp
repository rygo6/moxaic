#version 450
//#extension GL_EXT_debug_printf : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_KHR_shader_subgroup_shuffle : require

#include "global_binding.glsl"
#include "node_binding.glsl"

#include "common_util.glsl"
#include "math.glsl"
#include "subgroup_grid.glsl"
#include "depth_reproject.glsl"

layout (local_size_x = SUBGROUP_CAPACITY, local_size_y = WORKGROUP_SUBGROUP_COUNT, local_size_z = 1) in;

layout (set = 2, binding = 0, r32ui) uniform uimage2D outputAtomic;
layout (set = 2, binding = 1, rgba8) uniform image2D outputColor;

void main()
{
    ivec2 outputSize = imageSize(outputColor);
    InitializeSubgroupGridInfo(outputSize);

    vec4 colorSampleShuffle[4];
    bool currentFlagShuffle[4];

    colorSampleShuffle[quadSelf] = imageLoad(outputColor, grid_GlobalCoord);

    uint nodePackedDepth = imageAtomicAnd(outputAtomic, grid_GlobalCoord, clearCurrentDepthFlagMask);
    currentFlagShuffle[quadSelf] = UnpackDepthCurrentFlag(nodePackedDepth);

    int xEven = grid_GlobalCoord.x % 2 == 0 ? 1 : -1;
    int YEven = grid_GlobalCoord.y % 2 == 0 ? 1 : -1;
    ivec2 quadShuffleOffsets[4] = { { 0, YEven }, { xEven, YEven }, { xEven, 0 }, { 0, 0 }, };

    // We must do shuffling for all threads if it is current so that the shuffle works.
    // This is why you read and shuffle first before the if return branch
    for (int i = 0; i < 3; ++i) {
        colorSampleShuffle[i] = subgroupShuffle(colorSampleShuffle[quadSelf], SubgroupOffsetIndex(quadShuffleOffsets[i]));
        currentFlagShuffle[i] = subgroupShuffle(currentFlagShuffle[quadSelf], SubgroupOffsetIndex(quadShuffleOffsets[i]));
    }

    if (currentFlagShuffle[quadSelf])
        return;

    int currentCount = 0;
    vec4 colorAverage = vec4(0);
    for (int i = 0; i < 4; ++i) {
        colorAverage += currentFlagShuffle[i] ? colorSampleShuffle[i] : vec4(0);
        currentCount += int(currentFlagShuffle[i]);
    }
    colorAverage /= currentCount;

    imageStore(outputColor, grid_GlobalCoord, colorAverage);
}
