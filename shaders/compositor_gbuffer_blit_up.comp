#version 450
#extension GL_KHR_shader_subgroup_basic  : require
#extension GL_KHR_shader_subgroup_shuffle : require
//#extension GL_EXT_debug_printf : require

#define SUBGROUP_SQUARE_SIZE 4
#define SUBGROUP_CAPACITY 16 // 4 * 4

#define WORKGROUP_SQUARE_SIZE 8
#define WORKGROUP_SUBGROUP_COUNT 64 // 8 * 8

#define HALF_EPSILON 0.0009765625

layout (local_size_x = SUBGROUP_CAPACITY, local_size_y = WORKGROUP_SUBGROUP_COUNT, local_size_z = 1) in;

struct DepthState {
    float minDepth;
    float maxDepth;
    float nearZ;
    float farZ;
};

layout (set = 0, binding = 0) uniform State {
    DepthState depth;
    float cameraNearZ;
    float cameraFarZ;
} state;
layout (set = 0, binding = 1) uniform sampler2D srcDepth;
layout (set = 0, binding = 2, rgba16f) uniform image2D dstGbuffer[];

#define WORKGROUP_SAMPLE_COUNT (WORKGROUP_SUBGROUP_COUNT / 2)

shared float depths2[WORKGROUP_SAMPLE_COUNT];
shared float depth3;

bool Log() {
    return gl_WorkGroupID.y == 0;
}

// https://graphics.stanford.edu/~seander/bithacks.html#InterleaveBMN
uint Morton(uvec2 position) {
    uint x = position.x;
    uint y = position.y;

    // ??
//    const uint s[] = {8, 4, 2, 1};
//    const uint b[] = {0x00FF00FF, 0x0F0F0F0F, 0x33333333, 0x55555555 };
//    for (int i = 0; i < 4; ++i) {
//        x = (x | (x << s[i])) & b[i];
//        y = (y | (y << s[i])) & b[i];
//    }

    x = (x | (x << 8)) & 0x00FF00FFu;
    x = (x | (x << 4)) & 0x0F0F0F0Fu;
    x = (x | (x << 2)) & 0x33333333u;
    x = (x | (x << 1)) & 0x55555555u;

    y = (y | (y << 8)) & 0x00FF00FFu;
    y = (y | (y << 4)) & 0x0F0F0F0Fu;
    y = (y | (y << 2)) & 0x33333333u;
    y = (y | (y << 1)) & 0x55555555u;

    return x | (y << 1);
}

uint Unmorton(uint m) {
    m &= 0x55555555u;
    m = (m | (m >> 1)) & 0x33333333u;
    m = (m | (m >> 2)) & 0x0F0F0F0Fu;
    m = (m | (m >> 4)) & 0x00FF00FFu;
    m = (m | (m >> 8)) & 0x0000FFFFu;
    return m;
}

float Lerp(float a, float b, float t) {
    return a + ((b - a) * t);
}

vec4 LinearizeDepth(vec4 zNear, vec4 zFar, vec4 projectionDepth) {
    return zNear * zFar / (zFar - projectionDepth * (zFar - zNear));
}

vec4 ProjectDepth(vec4 newNear, vec4 newFar, vec4 linearDepth) {
    return (newFar * (linearDepth - newNear)) / (linearDepth * (newFar - newNear));
}

ivec2 GlobalWorkgroupID(uint globalWorkgroupIndex, ivec2 size) {
    size /= ivec2(WORKGROUP_SQUARE_SIZE, WORKGROUP_SQUARE_SIZE);
    size /= ivec2(SUBGROUP_SQUARE_SIZE, SUBGROUP_SQUARE_SIZE);
//    if (Log()){
//        debugPrintfEXT("%d %d %d \n", size.x, size.y, globalWorkgroupIndex);
//    }
    return ivec2(globalWorkgroupIndex % size.x, globalWorkgroupIndex / size.x) * WORKGROUP_SQUARE_SIZE * SUBGROUP_SQUARE_SIZE;
}

ivec2 LocalWorkgroupID(uint localSubgroupIndex) {
    return ivec2(localSubgroupIndex % WORKGROUP_SQUARE_SIZE, localSubgroupIndex / WORKGROUP_SQUARE_SIZE) * SUBGROUP_SQUARE_SIZE;
}

ivec2 SubgroupID(uint subgroupInvocIndex) {
    subgroupInvocIndex %= SUBGROUP_CAPACITY;
    return ivec2(subgroupInvocIndex % SUBGROUP_SQUARE_SIZE, subgroupInvocIndex / SUBGROUP_SQUARE_SIZE);
}

uint SubgroupOffsetIndex(ivec2 dxdy) {
    return (gl_SubgroupInvocationID + dxdy.x + (dxdy.y * SUBGROUP_SQUARE_SIZE));
}

uint SubgroupIndex(ivec2 dxdy) { ;
    uint subgroupIndex = gl_SubgroupInvocationID / SUBGROUP_CAPACITY;
    return dxdy.x + (dxdy.y * SUBGROUP_SQUARE_SIZE) + (subgroupIndex * SUBGROUP_CAPACITY);
}

float AverageNonZeroQuad(vec4 quad){
    int count = 0;
    float sum = 0.0f;
    for (int i = 0; i < 4; ++i) {
        count += int(quad[i] > HALF_EPSILON);
        sum += quad[i];
    }
    return count > 0 ? sum / float(count) : 0;
}

void main()
{
//    if (Log()) {
//        debugPrintfEXT("---- \n");
//    }

    ivec2 size = imageSize(dstGbuffer[0]);
    ivec2 halfSize = size / 2;

    uint globalWorkgroupIndex = gl_WorkGroupID.y;
    ivec2 globalWorkgroupId = GlobalWorkgroupID(globalWorkgroupIndex, halfSize);

    uint localSubgroupIndex = gl_GlobalInvocationID.y % WORKGROUP_SUBGROUP_COUNT;
    ivec2 localWorkgroupID = LocalWorkgroupID(localSubgroupIndex);

    uint globalSubgroupIndex = gl_GlobalInvocationID.y;
    uint subgroupInvocIndex = gl_SubgroupInvocationID;
    ivec2 subgroupID = SubgroupID(subgroupInvocIndex);

    ivec2 coord = subgroupID + localWorkgroupID + globalWorkgroupId;

    uint yInvocations = gl_NumWorkGroups.y * gl_WorkGroupSize.y;

    // * 2 because initial sample is 2x2 textureGather
    ivec2 coord0 = coord * 2;
    vec2 quadCenterUV = vec2(coord0 + 1) / vec2(size);

    #define EXPAND 31
    const ivec2 expandGatherOffsets[4] = { { -EXPAND, EXPAND }, { EXPAND, EXPAND }, { EXPAND, -EXPAND }, { -EXPAND, -EXPAND }, };
    vec4 expandGatheredDepth = textureGatherOffsets(srcDepth, quadCenterUV, expandGatherOffsets, 0);
    vec4 gatheredDepth = textureGather(srcDepth, quadCenterUV, 0);
    for (int i = 0; i < 4; ++i) {
        gatheredDepth[i] = gatheredDepth[i] > HALF_EPSILON ? gatheredDepth[i] : expandGatheredDepth[i];
    }

    vec4 gatheredLinearDepth = LinearizeDepth(vec4(state.depth.nearZ), vec4(state.depth.farZ), gatheredDepth);
    vec4 gatheredProjectedDepth = ProjectDepth(vec4(state.cameraFarZ), vec4(state.cameraNearZ), gatheredLinearDepth); // reverse near/far because we use reverseZ

    float depth0 = AverageNonZeroQuad(gatheredProjectedDepth);
    vec4 depth0Shuffle = vec4(
        subgroupShuffle(depth0, SubgroupOffsetIndex(ivec2(0, 1))),
        subgroupShuffle(depth0, SubgroupOffsetIndex(ivec2(1, 1))),
        subgroupShuffle(depth0, SubgroupOffsetIndex(ivec2(1, 0))),
        depth0);
    float depth1 = (subgroupID.x % 2 == 0 && subgroupID.y % 2 == 0) ? AverageNonZeroQuad(depth0Shuffle) : 0;
    vec4 depth1Shuffle = vec4(
        subgroupShuffle(depth1, SubgroupOffsetIndex(ivec2(0, 1))),
        subgroupShuffle(depth1, SubgroupOffsetIndex(ivec2(1, 1))),
        subgroupShuffle(depth1, SubgroupOffsetIndex(ivec2(1, 0))),
        depth1);
    float depth2 = (subgroupID.x % 4 == 0 && subgroupID.y % 4 == 0) ? AverageNonZeroQuad(depth1Shuffle) : 0;

    ivec2 coord1Sample = ivec2(subgroupID / 2) * 2;
    ivec2 coord2Sample = ivec2(subgroupID / 4) * 4;
    depth1 = subgroupShuffle(depth1, SubgroupIndex(coord1Sample));
    depth2 = subgroupShuffle(depth2, SubgroupIndex(coord2Sample));

    // Average what's available in the subgroups
    float depth2Shuffle = subgroupShuffle(depth2, SUBGROUP_CAPACITY);
    if (subgroupID.x % 4 == 0 && subgroupID.y % 4 == 0) {
        uint sharedMemoryIndex = localSubgroupIndex / 2;
        float averageDepth = (depth2 + depth2Shuffle) > 0 ? (depth2 + depth2Shuffle) / (int(depth2 > 0) +  int(depth2Shuffle > 0)) : 0;
        depths2[sharedMemoryIndex] = averageDepth;
    }

    barrier();

    if (gl_LocalInvocationIndex == 0) {
        int count = 0;
        float sum = 0.0;
        float maxDepth = 0.0;
        for (int i = 0; i < WORKGROUP_SAMPLE_COUNT; i++) {
            count += int(depths2[i] > HALF_EPSILON);
            sum += depths2[i];
        }

        float average = count > 0 ? sum / float(count) : 0;
        depth3 = average;
    }

    barrier();

    const ivec2 gatherOffsets[4] = { { 0, 1 }, { 1, 1 }, { 1, 0 }, { 0, 0 }, };
    for (int i = 0; i < 4; ++i) {
        float finalDepth = gatheredProjectedDepth[i] > 0 ? gatheredProjectedDepth[i] :
            depth0 > 0 ? depth0 :
            depth1 > 0 ? depth1 :
            depth2 > 0 ? depth2 :
            depth3;
        imageStore(dstGbuffer[0], coord0 + gatherOffsets[i], vec4(finalDepth));
    }
}