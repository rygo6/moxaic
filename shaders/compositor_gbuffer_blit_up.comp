#version 450
#extension GL_KHR_shader_subgroup_basic  : require
#extension GL_KHR_shader_subgroup_shuffle : require
//#extension GL_EXT_debug_printf : require

#include "math.glsl"
#include "subgroup_grid.glsl"

layout (local_size_x = SUBGROUP_CAPACITY, local_size_y = WORKGROUP_SUBGROUP_COUNT, local_size_z = 1) in;

struct DepthState {
    float minDepth;
    float maxDepth;
    float nearZ;
    float farZ;
};

layout (set = 0, binding = 0) uniform State {
    DepthState depth;
    float cameraNearZ;
    float cameraFarZ;
} state;
layout (set = 0, binding = 1) uniform sampler2D srcDepth;
layout (set = 0, binding = 2, rgba16f) uniform image2D dstGbuffer[];

//shared float depths2[WORKGROUP_SAMPLE_COUNT];
//shared float depth3;

bool Log() {
    return gl_WorkGroupID.y == 0;
}

float AverageNonZeroQuad(vec4 quad){
    int count = 0;
    float sum = 0.0f;
    for (int i = 0; i < 4; ++i) {
        count += int(quad[i] > HALF_EPSILON);
        sum += quad[i];
    }
    return count > 0 ? sum / float(count) : 0;
}

void main()
{
//    if (Log()) {
//        debugPrintfEXT("---- \n");
//    }

    ivec2 size = imageSize(dstGbuffer[0]);
    ivec2 halfSize = size / 2;

    uint globalWorkgroupIndex = gl_WorkGroupID.y;
    ivec2 globalWorkgroupId = GlobalWorkgroupID(globalWorkgroupIndex, halfSize);

    uint localSubgroupIndex = gl_GlobalInvocationID.y % WORKGROUP_SUBGROUP_COUNT;
    ivec2 localWorkgroupID = LocalWorkgroupID(localSubgroupIndex);

    uint globalSubgroupIndex = gl_GlobalInvocationID.y;
    uint subgroupInvocIndex = gl_SubgroupInvocationID;
    ivec2 subgroupID = SubgroupID(subgroupInvocIndex);

    const ivec2 globCoord = (subgroupID + localWorkgroupID + globalWorkgroupId);
    const ivec2 globCoordQuad = (subgroupID + localWorkgroupID + globalWorkgroupId) * 2;

    vec2 quadCenterUV = vec2(globCoordQuad + 1) / vec2(size);

    const int expand = 31;
    const ivec2 expandGatherOffsets[4] = { { -expand, expand }, { expand, expand }, { expand, -expand }, { -expand, -expand }, };
//    vec4 expandGatheredDepth = textureGatherOffsets(srcDepth, quadCenterUV, expandGatherOffsets, 0);
    vec4 gatheredDepth = textureGather(srcDepth, quadCenterUV, 0);
//    for (int i = 0; i < 4; ++i) {
//        gatheredDepth[i] = gatheredDepth[i] > HALF_EPSILON ? gatheredDepth[i] : expandGatheredDepth[i];
//    }

    vec4 gatheredLinearDepth = LinearizeDepth(vec4(state.depth.nearZ), vec4(state.depth.farZ), gatheredDepth);
    vec4 gatheredProjectedDepth = ProjectDepth(vec4(state.cameraFarZ), vec4(state.cameraNearZ), gatheredLinearDepth); // reverse near/far because we use reverseZ

    float depth0 = AverageNonZeroQuad(gatheredProjectedDepth);

    // Subgroup averaging
//    vec4 depth0Shuffle = vec4(
//        subgroupShuffle(depth0, SubgroupOffsetIndex(ivec2(0, 1))),
//        subgroupShuffle(depth0, SubgroupOffsetIndex(ivec2(1, 1))),
//        subgroupShuffle(depth0, SubgroupOffsetIndex(ivec2(1, 0))),
//        depth0);
//    float depth1 = (subgroupID.x % 2 == 0 && subgroupID.y % 2 == 0) ? AverageNonZeroQuad(depth0Shuffle) : 0;
//    vec4 depth1Shuffle = vec4(
//        subgroupShuffle(depth1, SubgroupOffsetIndex(ivec2(0, 1))),
//        subgroupShuffle(depth1, SubgroupOffsetIndex(ivec2(1, 1))),
//        subgroupShuffle(depth1, SubgroupOffsetIndex(ivec2(1, 0))),
//        depth1);
//    float depth2 = (subgroupID.x % 4 == 0 && subgroupID.y % 4 == 0) ? AverageNonZeroQuad(depth1Shuffle) : 0;

//    ivec2 coord1Sample = ivec2(subgroupID / 2) * 2;
//    ivec2 coord2Sample = ivec2(subgroupID / 4) * 4;
//    depth1 = subgroupShuffle(depth1, SubgroupIndex(coord1Sample));
//    depth2 = subgroupShuffle(depth2, SubgroupIndex(coord2Sample));

    // Shared memory averaging
//    float depth2Shuffle = subgroupShuffle(depth2, SUBGROUP_CAPACITY);
//    if (subgroupID.x % 4 == 0 && subgroupID.y % 4 == 0) {
//        uint sharedMemoryIndex = localSubgroupIndex / 2;
//        float averageDepth = (depth2 + depth2Shuffle) > 0 ? (depth2 + depth2Shuffle) / (int(depth2 > 0) +  int(depth2Shuffle > 0)) : 0;
//        depths2[sharedMemoryIndex] = averageDepth;
//    }

//    barrier();
//
//    if (gl_LocalInvocationIndex == 0) {
//        int count = 0;
//        float sum = 0.0;
//        float maxDepth = 0.0;
//        for (int i = 0; i < WORKGROUP_SAMPLE_COUNT; i++) {
//            count += int(depths2[i] > HALF_EPSILON);
//            sum += depths2[i];
//        }
//
//        float average = count > 0 ? sum / float(count) : 0;
//        depth3 = average;
//    }
//
//    barrier();

    for (int i = 0; i < 4; ++i) {
//        float finalDepth = gatheredProjectedDepth[i] > 0 ? gatheredProjectedDepth[i] :
//            depth0 > 0 ? depth0 :
//            depth1 > 0 ? depth1 :
//            depth2 > 0 ? depth2 :
//            depth3;
//        imageStore(dstGbuffer[0], coord0 + gatherOffsets[i], vec4(finalDepth));
        float finalDepth = gatheredProjectedDepth[i] > 0 ? gatheredProjectedDepth[i] : depth0;
        imageStore(dstGbuffer[0], globCoordQuad + quadGatherOffsets[i], vec4(finalDepth));
    }
}