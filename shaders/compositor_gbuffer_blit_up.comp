#version 450

#define LOCAL_SIZE 8
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

struct DepthState {
    float minDepth;
    float maxDepth;
    float nearZ;
    float farZ;
};

layout (set = 0, binding = 0) uniform State {
    DepthState depth;
    float cameraNearZ;
    float cameraFarZ;
} state;
layout (set = 0, binding = 1, r16) uniform image2D srcDepth;
layout (set = 0, binding = 2, r16) writeonly uniform image2D dstGbuffer;


float Lerp(float a, float b, float t) {
    return a + ((b - a) * t);
}

float LinearizeDepth(float zNear, float zFar, float projectionDepth) {
    return zNear * zFar / (zFar - projectionDepth * (zFar - zNear));
}

float ProjectDepth(float newNear, float newFar, float linearDepth) {
    return (newFar * (linearDepth - newNear)) / (linearDepth * (newFar - newNear));
}

void main()
{
    ivec2 srcSize = imageSize(srcDepth);
    ivec2 dstSize = imageSize(dstGbuffer);

    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(coord) / dstSize;

    float depth = imageLoad(srcDepth, coord).r;
    float linearDepth = LinearizeDepth(state.depth.nearZ, state.depth.farZ, depth);

    // reverse near/far because we use reverseZ
    float globalDepth = ProjectDepth(state.cameraFarZ, state.cameraNearZ, linearDepth);

    imageStore(dstGbuffer, coord, vec4(globalDepth));
}