#version 450
//#extension GL_EXT_debug_printf : require
//#extension GL_KHR_shader_subgroup_basic : require
//#extension GL_KHR_shader_subgroup_ballot : require

#include "global_binding.glsl"
#include "node_binding.glsl"
#include "compute_comp_binding.glsl"
#include "common_util.glsl"

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

layout (set = 1, binding = 5, r32ui) uniform uimage2D outputAveragedAtomic;
layout (set = 1, binding = 6, r32ui) uniform uimage2D outputAtomic;
layout (set = 1, binding = 7) uniform writeonly image2D outputColor;

vec3 Unpack565ColorFromUint(uint packed) {
    uint colorData = packed & 0xFFFFu;

    uint r = (colorData >> 11) & 0x1Fu;
    uint g = (colorData >> 5) & 0x3Fu;
    uint b = colorData & 0x1Fu;

    vec3 color;
    color.r = float(r) / 31.0;
    color.g = float(g) / 63.0;
    color.b = float(b) / 31.0;

    return color;
}

void Unpack16F8F8FFromUint(uint packed, out float float1, out float float2, out float float3) {
    uint int1 = (packed >> 16) & 0xFFFFu;// Extract first 16 bits
    uint int2 = (packed >> 8) & 0xFFu;// Extract next 8 bits
    uint int3 = packed & 0xFFu;// Extract last 8 bits

    // Normalize each component back to [0, 1] range
    float1 = float(int1) / 65535.0;
    float2 = float(int2) / 255.0;
    float3 = float(int3) / 255.0;
}

vec3 UnpackVec3FromUint(uint packed) {
    uint r = (packed >> 16) & 0xFFu;
    uint g = (packed >> 8) & 0xFFu;
    uint b = packed & 0xFFu;
    return vec3(float(r) / 255.0, float(g) / 255.0, float(b) / 255.0);
}

float UnpackFloatFromUint(uint packed) {
    float value = float(packed);
    return value / 4294967295.0;
}

void main()
{
    const uint maxUint = 0xFFFFFFFFu;

    const ivec2 iScreenSize = globalUBO.screenSize;
    const vec2 screenSize = vec2(iScreenSize);
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2 uv = UVFromCoord(coord, screenSize);

    const ivec2 iAveragedScreenSize = globalUBO.screenSize / LOCAL_SIZE;
    const vec2 averagedScreenSize = vec2(iAveragedScreenSize);
    const ivec2 averagedCoord = CoordFromUV(uv, averagedScreenSize);

    // debug pre
    //    const uint atomicSample = imageLoad(outputAveragedAtomic, averagedCoord).r;
    //    const float averageDepth = UnpackFloatFromUint(atomicSample);
    //    imageStore(outputColor, coord, vec4(averageDepth, 0, 0, 1));
    //    imageStore(outputAveragedAtomic, averagedCoord, uvec4(0, 0, 0, 0));
    //    return;

    const uint data = imageLoad(outputAtomic, coord).r;
    const vec3 color = Unpack565ColorFromUint(data);
    const vec3 colorSRGB = pow(color.rgb, vec3(1.0 / 2.2));
    imageStore(outputColor, coord, vec4(colorSRGB, 1));

    // reset for next frame, is there a better way to do this?
    imageStore(outputAtomic, coord, uvec4(0, 0, 0, 0));
    if (gl_LocalInvocationIndex == 0) {
        imageStore(outputAveragedAtomic, averagedCoord, uvec4(0, 0, 0, 0));
    }
}
