#version 450

#include "math.glsl"
#include "logging.glsl"
#include "gbuffer_process_binding.glsl"

layout (local_size_x = GBUFFER_PROCESS_LOCAL_SIZE, local_size_y = GBUFFER_PROCESS_LOCAL_SIZE, local_size_z = 1) in;

void main()
{
    ivec2 srcSize = textureSize(srcDepth, 0);
    ivec2 dstSize = imageSize(dstGbuffer);

    ivec2 coord = ivec2(gl_GlobalInvocationID);
    vec2 uv = vec2(gl_GlobalInvocationID) / dstSize;

    float depthSample = texelFetch(srcGbuffer, coord, 0).r;
    if (!(depthSample > HALF_EPSILON))
        depthSample = texture(srcDepth, uv).r;

    if (dstSize.x == 1280) {
        depthSample = LinearizeDepth(push.state.depthNearZ, push.state.depthFarZ, depthSample);
        depthSample = ProjectDepth(push.state.cameraFarZ, push.state.cameraNearZ, depthSample);// reverse near/far because we use reverseZ
    }

    imageStore(dstGbuffer, coord, vec4(depthSample));
}
