#version 450
#extension GL_EXT_debug_printf : require

#include "global_binding.glsl"
#include "compute_node_binding.glsl"

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

layout (set = 1, binding = 5, r32ui) uniform uimage2D outputAveragedAtomic;

vec3 nodeOriginWorldPos = vec3(0, 0, -0.5);
vec3 nodeOriginWorldDirection = vec3(0, 0, 1);
const uint maxUint = 0xFFFFFFFFu;

const vec2 ndcCorners[] = {
{ -1, -1 },
{ 1, 1 },
};

float CalcNodeZPlane(){

    vec2 uvs[ndcCorners.length()];
    for (int i = 0; i < ndcCorners.length(); ++i){
        const vec3 ndc = GlobalNDCFromNodeNDC(vec3(ndcCorners[i].xy, 0));
        uvs[i] = UVFromNDC(ndc);
    }
    const float frontMax = min(abs(uvs[1].x - uvs[0].x), abs(uvs[1].y - uvs[0].y));

    for (int i = 0; i < ndcCorners.length(); ++i){
        const vec3 ndc = GlobalNDCFromNodeNDC(vec3(ndcCorners[i].xy, 1));
        uvs[i] = UVFromNDC(ndc);
    }
    const float backMax = min(abs(uvs[1].x - uvs[0].x), abs(uvs[1].y - uvs[0].y));

    const float nodeZPlane = frontMax > backMax ? -1 : 1;

    return nodeZPlane;
}

void NodeIntersectUV(const vec2 uv, out float nodeDepthSample)
{
    const vec2 ndc = NDCFromUV(1 - uv);// why do I 1 - uv here?! It does flip it to proper layout
    const vec4 clipPos = vec4(ndc, 0, 1);
    const vec3 worldPos = WorldPosFromGlobalClipPos(clipPos);
    const vec3 worldRay = WorldRayFroNDC(ndc);
    vec3 intersectWorldPos;
    bool intersected = intersectRayPlane(worldPos, worldRay, nodeOriginWorldPos, nodeOriginWorldDirection, intersectWorldPos);
    const vec4 intersectGlobalClipPos = GlobalClipPosFromWorldPos(intersectWorldPos);
    const vec3 intersectGlobalNDC = NDCFromClipPos(intersectGlobalClipPos);
    const vec4 intersectNodeClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    const vec3 intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    const vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
    nodeDepthSample = intersected ? SampleNodeDepth(intersectNodeUV) : 1.0;
}

bool NodeIntersectUV(const vec2 uv, out vec3 intersectNodeNDC, out float nodeDepthSample)
{
    const vec2 ndc = NDCFromUV(1 - uv);// why do I 1 - uv here?! It does flip it to proper layout
    const vec4 clipPos = vec4(ndc, 0, 1);
    const vec3 worldPos = WorldPosFromGlobalClipPos(clipPos);
    const vec3 worldRay = WorldRayFroNDC(ndc);
    vec3 intersectWorldPos;
    bool intersected = intersectRayPlane(worldPos, worldRay, nodeOriginWorldPos, nodeOriginWorldDirection, intersectWorldPos);
    const vec4 intersectNodeClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    const vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
    const vec3 nodeWorldNormal = texture(nodeNormalTexture, intersectNodeUV).xyz * vec3(1, -1, 1);
    nodeDepthSample = SampleNodeDepth(intersectNodeUV);
//    return intersected && nodeDepthSample < 1 && dot(nodeWorldNormal.xyz, worldRay) > 0;
    return intersected && nodeDepthSample < 1;
}

const ivec2 innerSampleOffsets[] = {
{ 0, 0 },
{ 1, 1 },
{ 1, 0 },
{ 0, 1 },
};

const ivec2 outerSampleOffsets[] = {
{ -1, -1 },
{ 2, 2 },
{ 2, -1 },
{ -1, 2 },
};

void main()
{
    const vec2 uvSize = vec2(1.0, 1.0) / vec2(globalUBO.width, globalUBO.height);
    const ivec2 iFullScreenSize = ivec2(globalUBO.width, globalUBO.height);
    const vec2 fullScreenSize = vec2(iFullScreenSize);
    const ivec2 iScreenSize = ivec2(globalUBO.width / LOCAL_SIZE, globalUBO.height / LOCAL_SIZE);
    const vec2 screenSize = vec2(iScreenSize);
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    vec3 intersectNodeNDCs[innerSampleOffsets.length()];
    float depthSamples[innerSampleOffsets.length()];
    float minDepthSample = 1;
    float maxDepthSample = 0;
    int validSampleCount = 0;
    for (int i = 0; i < innerSampleOffsets.length(); ++i){
        const vec2 sampleUV = UVFromCoord((coord * LOCAL_SIZE) + (innerSampleOffsets[i] * (LOCAL_SIZE - 1)), fullScreenSize);
        float depthSample;
        if (NodeIntersectUV(sampleUV, intersectNodeNDCs[i], depthSamples[i])) {
            minDepthSample = min(depthSamples[i], minDepthSample);
            maxDepthSample = max(depthSamples[i], maxDepthSample);
            validSampleCount++;

//            if (gl_GlobalInvocationID.x == 16 && gl_GlobalInvocationID.y == 16) {
//                debugPrintfEXT("16 16 %d %f", i, sampleUV.x, sampleUV.y);
//            }
//            if (gl_GlobalInvocationID.x == 17 && gl_GlobalInvocationID.y == 16) {
//                debugPrintfEXT("17 16 %d %f", i, sampleUV.x, sampleUV.y);
//            }
        }
    }

    if (validSampleCount == 0){
        return;
    }

//    for (int i = 0; i < outerSampleOffsets.length(); ++i){
//        const vec2 sampleUV = UVFromCoord(coord + outerSampleOffsets[i], screenSize);
//        float depthSample;
//        NodeIntersectUV(sampleUV, depthSample);
//        minDepthSample = min(depthSample, minDepthSample);
//    }

    //    const vec3 depthProjectedGlobalNDC = GlobalNDCFromNodeNDC(vec3(intersectNodeNDCs[0].xy, minDepthSample));
    //    vec2 depthProjectGlobalUV = UVFromNDC(depthProjectedGlobalNDC);

    const vec3 ulDepthProjectGlobalNDC = GlobalNDCFromNodeNDC(vec3(intersectNodeNDCs[0].xy, minDepthSample));
    const vec2 ulDepthProjectGlobalUV = UVFromNDC(ulDepthProjectGlobalNDC);
    const vec3 lrDepthProjectGlobalNDC = GlobalNDCFromNodeNDC(vec3(intersectNodeNDCs[1].xy, minDepthSample));
    const vec2 lrDepthProjectGlobalUV = UVFromNDC(lrDepthProjectGlobalNDC);
    const vec3 urDepthProjectGlobalNDC = GlobalNDCFromNodeNDC(vec3(intersectNodeNDCs[2].xy, minDepthSample));
    const vec2 urDepthProjectGlobalUV = UVFromNDC(urDepthProjectGlobalNDC);


    //    const ivec2 depthProjectGlobalCoord = CoordFromUVRound(depthProjectGlobalUV, screenSize);
    //    const uint data = PackFloat32ToUint32(depthProjectedGlobalNDC.z);
    //    imageAtomicMin(outputAveragedAtomic, depthProjectGlobalCoord, data);

    //    const vec2 uvSize = vec2(1.0, 1.0) / 32.0;
    //    vec2 uvSize = vec2(1.0, 1.0) / vec2(64.0, 64.0);
    //    const vec2 uvDiff = abs(lrDepthProjectGlobalUV - urDepthProjectGlobalUV);
    //    const bool squashed = uvDiff.x > uvSize.x;
    //    vec2 squashedUVDiff = vec2(uvDiff.x > uvSize.x ? uvSize.x * 0.5 : uvSize.x, uvSize.y);

    uint upperLeftData = PackUint32FromFloat16Float16(ulDepthProjectGlobalUV.x, ulDepthProjectGlobalUV.y);
    uint sizeData = PackUint32FromFloat16Float16(urDepthProjectGlobalUV.x, lrDepthProjectGlobalUV.y);
    const uint depthData = PackUint32FromFloat24Uint8(ulDepthProjectGlobalNDC.z, 0);

    const uint tileIndex = atomicAdd(tileBuffer.command.x, 1);
    tileBuffer.tiles[tileIndex] =  Tile(upperLeftData, sizeData, depthData);

    //    if (squashed) {
    //        depthProjectGlobalUV.x += uvSize.x * 0.5;
    //        upperLeftData = PackUint32FromFloat16Float16(depthProjectGlobalUV.x, depthProjectGlobalUV.y);
    //        const uint tileIndex = atomicAdd(tileBuffer.command.x, 1);
    //        tileBuffer.tiles[tileIndex] =  Tile(upperLeftData, sizeData, depthData);
    //    }

}
