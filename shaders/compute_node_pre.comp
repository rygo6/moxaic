#version 450
//#extension GL_EXT_debug_printf : require
//#extension GL_KHR_shader_subgroup_ballot : require

#include "global_binding.glsl"
#include "compute_node_binding.glsl"

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

layout (set = 1, binding = 5, r32ui) uniform uimage2D outputAveragedAtomic;

vec3 nodeOriginWorldPos = vec3(0, 0, -0.5);
vec3 nodeOriginWorldDirection = vec3(0, 0, -1);
const uint maxUint = 0xFFFFFFFFu;

const vec2 ndcCorners[] = {
{ -1, -1 },
{ 1, 1 },
};

float CalcNodeZPlane(){

    vec2 uvs[ndcCorners.length()];
    for (int i = 0; i < ndcCorners.length(); ++i){
        const vec3 ndc = GlobalNDCFromNodeNDC(vec3(ndcCorners[i].xy, 0));
        uvs[i] = UVFromNDC(ndc);
    }
    const float frontMax = min(abs(uvs[1].x - uvs[0].x), abs(uvs[1].y - uvs[0].y));

    for (int i = 0; i < ndcCorners.length(); ++i){
        const vec3 ndc = GlobalNDCFromNodeNDC(vec3(ndcCorners[i].xy, 1));
        uvs[i] = UVFromNDC(ndc);
    }
    const float backMax = min(abs(uvs[1].x - uvs[0].x), abs(uvs[1].y - uvs[0].y));

    const float nodeZPlane = frontMax > backMax ? -1 : 1;

    return nodeZPlane;
}

bool NodeIntersectUV(const vec2 uv, out float nodeDepthSample)
{
    const vec2 ndc = NDCFromUV(uv);
    const vec4 clipPos = ClipPosFromNDC(ndc);
    const vec3 worldPos = WorldPosFromGlobalClipPos(clipPos);
    const vec3 worldRay = WorldRayDirFromGlobalNDC(ndc);
    vec3 intersectWorldPos;
    bool intersected = intersectRayPlane(worldPos, worldRay, nodeOriginWorldPos, nodeOriginWorldDirection, intersectWorldPos);
    const vec4 intersectGlobalClipPos = GlobalClipPosFromWorldPos(intersectWorldPos);
    const vec3 intersectGlobalNDC = NDCFromClipPos(intersectGlobalClipPos);
    const vec4 intersectNodeClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    const vec3 intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    const vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
    nodeDepthSample = textureLod(nodeDepthTexture, intersectNodeUV, 0).r;
    return intersected && nodeDepthSample > 0;
}

bool NodeIntersectUV(const vec2 uv, out vec3 intersectNodeNDC, out float nodeDepthSample)
{
    const vec2 ndc = NDCFromUV(uv);
    const vec4 clipPos = ClipPosFromNDC(ndc);
    const vec3 worldPos = WorldPosFromGlobalClipPos(clipPos);
    const vec3 worldRay = WorldRayDirFromGlobalNDC(ndc);
    vec3 intersectWorldPos;
    bool intersected = intersectRayPlane(worldPos, worldRay, nodeOriginWorldPos, nodeOriginWorldDirection, intersectWorldPos);
    const vec4 intersectNodeClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    const vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
//    const vec3 nodeWorldNormal = texture(nodeNormalTexture, intersectNodeUV).xyz * vec3(1, -1, 1);
    nodeDepthSample = textureLod(nodeDepthTexture, intersectNodeUV, 0).r;
    // Do I want to include normal in this test!?
//    return intersected && nodeDepthSample > 0 && dot(nodeWorldNormal.xyz, worldRay) < 0;
    return intersected && nodeDepthSample > 0;
}

const ivec2 innerSampleOffsets[] = {
{ 0, 0 }, //ul
{ 1, 0 }, //ur
{ 0, 1 }, //ll
{ 1, 1 }, //lr
};

const ivec2 outerSampleOffsets[] = {
{ -1, -1 },
{ 2, -1 },
{ -1, 2 },
{ 2, 2 },
};

//const ivec2 outerSampleOffsets[] = {
//{ -2, -2 },
//{ 3, -2 },
//{ -2, 3 },
//{ 3, 3 },
//};

void main()
{
    const ivec2 iScreenSize = globalUBO.screenSize;
    const vec2 screenSize = vec2(iScreenSize);

    const ivec2 iAveragedScreenSize = iScreenSize / LOCAL_SIZE;
    const vec2 averagedScreenSize = vec2(iAveragedScreenSize);

    const ivec2 iaveragedScreenSizeSS = iAveragedScreenSize * SUPERSAMPLE;
    const vec2 averagedScreenSizeSS = vec2(iaveragedScreenSizeSS);

    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    int validSampleCount = 0;
    float maxDepthSample = 0;
    vec3 centerIntersectNodeNDC;
    const vec2 centerSampleUV = UVFromCoordCenter(coord, averagedScreenSizeSS);
    validSampleCount += int(NodeIntersectUV(centerSampleUV, centerIntersectNodeNDC, maxDepthSample));

    for (int i = 0; i < innerSampleOffsets.length(); ++i){
        const vec2 sampleUV = UVFromCoord(coord + innerSampleOffsets[i], averagedScreenSizeSS);
        float depthSample;
        validSampleCount += int(NodeIntersectUV(sampleUV, depthSample));
        maxDepthSample = max(depthSample, maxDepthSample);
    }

//    for (int i = 0; i < outerSampleOffsets.length(); ++i){
//        const vec2 sampleUV = UVFromCoord(coord + outerSampleOffsets[i], superSampleScreenSize);
//        float depthSample;
//        validSampleCount += int(NodeIntersectUV(sampleUV, depthSample));
//        maxDepthSample = max(depthSample, maxDepthSample);
//    }

    if (validSampleCount == 0){
        return;
    }

    const vec3 depthNodeProjectNodeNDC = vec3(centerIntersectNodeNDC.xy, maxDepthSample);
    const vec4 depthProjectNodeClipPos = ClipPosFromNDC(depthNodeProjectNodeNDC);
    const vec3 depthProjectWorldPos = WorldPosFromNodeClipPos(depthProjectNodeClipPos);
    const vec4 depthProjectGlobalClipPos = GlobalClipPosFromWorldPos(depthProjectWorldPos);
    const vec3 depthProjectGlobalNDC = NDCFromClipPos(depthProjectGlobalClipPos);
    const vec2 depthProjectGlobalUV = UVFromNDC(depthProjectGlobalNDC);
    const ivec2 depthProjectGlobalCoord = CoordFromUVRound(depthProjectGlobalUV, averagedScreenSize);
    const uint depthProjectGlobalData = PackFloat32ToUint32(depthProjectGlobalNDC.z);
    imageAtomicMax(outputAveragedAtomic, depthProjectGlobalCoord, depthProjectGlobalData);

//    if (gl_GlobalInvocationID.x == 16 && gl_GlobalInvocationID.y == 16) {
//        debugPrintfEXT("%d %d", depthProjectGlobalCoord.x, depthProjectGlobalCoord.y);
//    }
}

void mainTiled()
{
    const vec2 uvSize = vec2(1.0, 1.0) / globalUBO.screenSize;
    const vec2 halfUVSize = vec2(0.5, 0.5) / globalUBO.screenSize;
    const ivec2 iFullScreenSize = globalUBO.screenSize;
    const vec2 fullScreenSize = vec2(iFullScreenSize);
    const ivec2 iScreenSize = globalUBO.screenSize / LOCAL_SIZE;
    const vec2 screenSize = vec2(iScreenSize);
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    vec3 intersectNodeNDCs[innerSampleOffsets.length()];
    float depthSamples[innerSampleOffsets.length()];
    float minDepthSample = 1;
    float maxDepthSample = 0;
    int validSampleCount = 0;
    for (int i = 0; i < innerSampleOffsets.length(); ++i){
        const vec2 sampleUV = UVFromCoordCenter((coord * LOCAL_SIZE) + (innerSampleOffsets[i] * (LOCAL_SIZE - 1)), fullScreenSize);
        if (NodeIntersectUV(sampleUV, intersectNodeNDCs[i], depthSamples[i])) {
            minDepthSample = min(depthSamples[i], minDepthSample);
            maxDepthSample = max(depthSamples[i], maxDepthSample);
            validSampleCount++;

            //            if (gl_GlobalInvocationID.x == 16 && gl_GlobalInvocationID.y == 16) {
            //                debugPrintfEXT("16 16 %d %f", i, sampleUV.x, sampleUV.y);
            //            }
            //            if (gl_GlobalInvocationID.x == 17 && gl_GlobalInvocationID.y == 16) {
            //                debugPrintfEXT("17 16 %d %f", i, sampleUV.x, sampleUV.y);
            //            }
        }
    }

    if (validSampleCount == 0){
        return;
    }

    //    for (int i = 0; i < outerSampleOffsets.length(); ++i){
    //        const vec2 sampleUV = UVFromCoord(coord + outerSampleOffsets[i], screenSize);
    //        float depthSample;
    //        NodeIntersectUV(sampleUV, depthSample);
    //        minDepthSample = min(depthSample, minDepthSample);
    //    }

    //    const vec3 depthProjectedGlobalNDC = GlobalNDCFromNodeNDC(vec3(intersectNodeNDCs[0].xy, minDepthSample));
    //    vec2 depthProjectGlobalUV = UVFromNDC(depthProjectedGlobalNDC);



    const vec3 ulDepthProjectGlobalNDC = GlobalNDCFromNodeNDC(vec3(intersectNodeNDCs[0].xy, minDepthSample));
    const vec2 ulDepthProjectGlobalUV = UVFromNDC(ulDepthProjectGlobalNDC);
    const ivec2 ulDepthProjectGlobalCoord = CoordFromUV(ulDepthProjectGlobalUV, fullScreenSize);
    const vec3 lrDepthProjectGlobalNDC = GlobalNDCFromNodeNDC(vec3(intersectNodeNDCs[3].xy, minDepthSample));
    const vec2 lrDepthProjectGlobalUV = UVFromNDC(lrDepthProjectGlobalNDC);
    const ivec2 lrDepthProjectGlobalCoord = CoordFromUV(lrDepthProjectGlobalUV, fullScreenSize);
    //    const vec3 urDepthProjectGlobalNDC = GlobalNDCFromNodeNDC(vec3(intersectNodeNDCs[2].xy, minDepthSample));
    //    const vec2 urDepthProjectGlobalUV = UVFromNDC(urDepthProjectGlobalNDC);
    //    const uvec2 urDepthProjectGlobalCoord = uCoordFromUV(urDepthProjectGlobalUV, fullScreenSize);


    //    const ivec2 depthProjectGlobalCoord = CoordFromUVRound(depthProjectGlobalUV, screenSize);
    //    const uint data = PackFloat32ToUint32(depthProjectedGlobalNDC.z);
    //    imageAtomicMin(outputAveragedAtomic, depthProjectGlobalCoord, data);

    //    const vec2 uvSize = vec2(1.0, 1.0) / 32.0;
    //    vec2 uvSize = vec2(1.0, 1.0) / vec2(64.0, 64.0);
    //    const vec2 uvDiff = abs(lrDepthProjectGlobalUV - urDepthProjectGlobalUV);
    //    const bool squashed = uvDiff.x > uvSize.x;
    //    vec2 squashedUVDiff = vec2(uvDiff.x > uvSize.x ? uvSize.x * 0.5 : uvSize.x, uvSize.y);

    uint upperLeftData = PackU32FromU16U16(ulDepthProjectGlobalCoord.x, ulDepthProjectGlobalCoord.y);
    uint lowerLeftData = PackU32FromU16U16(lrDepthProjectGlobalCoord.x, lrDepthProjectGlobalCoord.y);
    const uint depthData = PackUint32FromFloat24Uint8(ulDepthProjectGlobalNDC.z, 0);

    const uint tileIndex = atomicAdd(tileBuffer.command.x, 1);
    tileBuffer.tiles[tileIndex] =  Tile(upperLeftData, lowerLeftData, depthData);

    //    if (squashed) {
    //        depthProjectGlobalUV.x += uvSize.x * 0.5;
    //        upperLeftData = PackUint32FromFloat16Float16(depthProjectGlobalUV.x, depthProjectGlobalUV.y);
    //        const uint tileIndex = atomicAdd(tileBuffer.command.x, 1);
    //        tileBuffer.tiles[tileIndex] =  Tile(upperLeftData, sizeData, depthData);
    //    }

}
