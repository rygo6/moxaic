#version 450
//#extension GL_EXT_debug_printf : require
//#extension GL_KHR_shader_subgroup_ballot : require

#include "global_binding.glsl"
#include "compute_node_binding.glsl"

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

layout (set = 1, binding = 5, r32ui) uniform uimage2D outputAveragedAtomic;

vec3 nodeOriginWorldPos = vec3(0, 0, -0.5);
vec3 nodeOriginWorldDirection = vec3(0, 0, -1);
const uint maxUint = 0xFFFFFFFFu;

const vec2 ndcCorners[] = {
{ -1, -1 },
{ 1, 1 },
};

vec2 IntersectNodeUV(const vec2 globalUV)
{
    const vec2 globalNDC = NDCFromUV(globalUV);
    const vec4 globalClipPos = ClipPosFromNDC(globalNDC);
    const vec3 worldPos = WorldPosFromGlobalClipPos(globalClipPos);
    const vec3 worldRay = WorldRayDirFromGlobalNDC(globalNDC);
    vec3 intersectWorldPos;
    bool intersected = intersectRayPlane(worldPos, worldRay, nodeOriginWorldPos, nodeOriginWorldDirection, intersectWorldPos);
    const vec4 intersectGlobalClipPos = GlobalClipPosFromWorldPos(intersectWorldPos);
    const vec3 intersectGlobalNDC = NDCFromClipPos(intersectGlobalClipPos);
    const vec4 intersectNodeClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    const vec3 intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    const vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
    return intersectNodeUV;
}

bool SampleNode(const vec2 uv, out float nodeDepthSample)
{
    const vec2 ndc = NDCFromUV(uv);
    const vec4 clipPos = ClipPosFromNDC(ndc);
    const vec3 worldPos = WorldPosFromGlobalClipPos(clipPos);
    const vec3 worldRay = WorldRayDirFromGlobalNDC(ndc);
    vec3 intersectWorldPos;
    bool intersected = intersectRayPlane(worldPos, worldRay, nodeOriginWorldPos, nodeOriginWorldDirection, intersectWorldPos);
    const vec4 intersectGlobalClipPos = GlobalClipPosFromWorldPos(intersectWorldPos);
    const vec3 intersectGlobalNDC = NDCFromClipPos(intersectGlobalClipPos);
    const vec4 intersectNodeClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    const vec3 intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    const vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
    nodeDepthSample = textureLod(nodeGBufferTexture, intersectNodeUV, 0).r;
    return intersected && nodeDepthSample > 0;
}

bool SampleNode(const vec2 uv, const vec2 dfdx, const vec2 dfdy, out vec3 intersectNodeNDC, out float nodeDepthSample)
{
    const vec2 ndc = NDCFromUV(uv);
    const vec4 clipPos = ClipPosFromNDC(ndc);
    const vec3 worldPos = WorldPosFromGlobalClipPos(clipPos);
    const vec3 worldRay = WorldRayDirFromGlobalNDC(ndc);
    vec3 intersectWorldPos;
    bool intersected = intersectRayPlane(worldPos, worldRay, nodeOriginWorldPos, nodeOriginWorldDirection, intersectWorldPos);
    const vec4 intersectNodeClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    const vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
//    const vec3 nodeWorldNormal = texture(nodeNormalTexture, intersectNodeUV).xyz * vec3(1, -1, 1);
//    nodeDepthSample = textureLod(nodeGBufferTexture, intersectNodeUV, 7).r;
    nodeDepthSample = textureGrad(nodeGBufferTexture, intersectNodeUV, dfdx, dfdy).r;
    // Do I want to include normal in this test!?
//    return intersected && nodeDepthSample > 0 && dot(nodeWorldNormal.xyz, worldRay) < 0;
    return intersected && nodeDepthSample > 0;
}

const ivec2 innerSampleOffsets[] = {
{ 0, 0 }, //ul
{ 1, 0 }, //ur
{ 0, 1 }, //ll
{ 1, 1 }, //lr
};

const ivec2 outerSampleOffsets[] = {
{ -1, -1 },
{ 2, -1 },
{ -1, 2 },
{ 2, 2 },
};

void main()
{
    const ivec2 iScreenSize = globalUBO.screenSize;
    const vec2 screenSize = vec2(iScreenSize);

    const ivec2 iAveragedScreenSize = iScreenSize / LOCAL_SIZE;
    const vec2 averagedScreenSize = vec2(iAveragedScreenSize);

    const ivec2 iaveragedScreenSizeSS = iAveragedScreenSize * SUPERSAMPLE;
    const vec2 averagedScreenSizeSS = vec2(iaveragedScreenSizeSS);

    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    const vec2 ulGlobalUV = UVFromCoord(coord + innerSampleOffsets[0], averagedScreenSizeSS);
    const vec2 ulNodeIntersectUV = IntersectNodeUV(ulGlobalUV);
    const vec2 urGlobalUV = UVFromCoord(coord + innerSampleOffsets[1], averagedScreenSizeSS);
    const vec2 urNodeIntersectUV = IntersectNodeUV(urGlobalUV);
    const vec2 llGlobalUV = UVFromCoord(coord + innerSampleOffsets[2], averagedScreenSizeSS);
    const vec2 llNodeIntersectUV = IntersectNodeUV(llGlobalUV);
    const vec2 dfdx = urNodeIntersectUV - ulNodeIntersectUV;
    const vec2 dfdy = llNodeIntersectUV - ulNodeIntersectUV;

    int validSampleCount = 0;
    float maxDepthSample = 0;
    vec3 centerIntersectNodeNDC;
    const vec2 centerSampleUV = UVFromCoordCenter(coord, averagedScreenSizeSS);
    validSampleCount += int(SampleNode(centerSampleUV, dfdx, dfdy, centerIntersectNodeNDC, maxDepthSample));

//    for (int i = 0; i < innerSampleOffsets.length(); ++i){
//        const vec2 sampleUV = UVFromCoord(coord + innerSampleOffsets[i], averagedScreenSizeSS);
//        float depthSample;
//        validSampleCount += int(SampleNode(sampleUV, depthSample));
//        maxDepthSample = max(depthSample, maxDepthSample);
//    }
//
//    for (int i = 0; i < outerSampleOffsets.length(); ++i){
//        const vec2 sampleUV = UVFromCoord(coord + outerSampleOffsets[i], averagedScreenSizeSS);
//        float depthSample;
//        validSampleCount += int(SampleNode(sampleUV, depthSample));
//        maxDepthSample = max(depthSample, maxDepthSample);
//    }

    if (validSampleCount == 0){
        return;
    }

    const vec3 depthNodeProjectNodeNDC = vec3(centerIntersectNodeNDC.xy, maxDepthSample);
    const vec4 depthProjectNodeClipPos = ClipPosFromNDC(depthNodeProjectNodeNDC);
    const vec3 depthProjectWorldPos = WorldPosFromNodeClipPos(depthProjectNodeClipPos);
    const vec4 depthProjectGlobalClipPos = GlobalClipPosFromWorldPos(depthProjectWorldPos);
    const vec3 depthProjectGlobalNDC = NDCFromClipPos(depthProjectGlobalClipPos);
    const vec2 depthProjectGlobalUV = UVFromNDC(depthProjectGlobalNDC);
    const ivec2 depthProjectGlobalCoord = CoordFromUVRound(depthProjectGlobalUV, averagedScreenSize);
    const uint depthProjectGlobalData = PackFloat32ToUint32(depthProjectGlobalNDC.z);
    imageAtomicMax(outputAveragedAtomic, depthProjectGlobalCoord, depthProjectGlobalData);

//    if (gl_GlobalInvocationID.x == 16 && gl_GlobalInvocationID.y == 16) {
//        debugPrintfEXT("%d %d", depthProjectGlobalCoord.x, depthProjectGlobalCoord.y);
//    }
}