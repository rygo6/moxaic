#version 450
#extension GL_KHR_shader_subgroup_basic  : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_shader_subgroup_ballot : require

#include "math.glsl"
#include "subgroup_grid.glsl"
#include "logging.glsl"

layout (local_size_x = SUBGROUP_COUNT, local_size_y = WORKGROUP_SUBGROUP_COUNT, local_size_z = 1) in;

struct DepthState {
    float minDepth;
    float maxDepth;
    float nearZ;
    float farZ;
};

layout (set = 0, binding = 0) uniform ProcessState {
    DepthState depth;
    float cameraNearZ;
    float cameraFarZ;
} processState;
layout (set = 0, binding = 1) uniform sampler2D srcDepth;
layout (set = 0, binding = 2, rgba16f) uniform image2D dstGbuffer;

shared float sharedDepth2[WORKGROUP_SUBGROUP_COUNT]; // 8 * 8 = 64
shared float sharedDepth3[WORKGROUP_SUBGROUP_COUNT / 4]; // 4 * 4 = 16
shared float sharedDepth4[WORKGROUP_SUBGROUP_COUNT / 16]; // 2 * 2 = 4
shared float sharedDepth5; // 1

void main()
{
    ivec2 outputSize = imageSize(dstGbuffer);
    InitializeSubgroupGridInfo(outputSize);

    float depthSample = texture(srcDepth, grid_GlobalUV).r;
    float linearDepth = LinearizeDepth(processState.depth.nearZ, processState.depth.farZ, depthSample);
    float projectedDepth = ProjectDepth(processState.cameraFarZ, processState.cameraNearZ, linearDepth); // reverse near/far because we use reverseZ

    float depth[6];
    depth[0] = projectedDepth;

    {
        const int coordDivisor = 2;
        const int offset = coordDivisor / 2;
        vec4 shuffle = vec4(
            subgroupShuffle(depth[0], SubgroupIndexFromOffset(ivec2(0,      offset))),
            subgroupShuffle(depth[0], SubgroupIndexFromOffset(ivec2(offset, offset))),
            subgroupShuffle(depth[0], SubgroupIndexFromOffset(ivec2(offset, 0))),
            depth[0]);

        ivec2 rootSubgroupCoord = ivec2(grid_SubgroupCoord / coordDivisor) * coordDivisor;
        uint rootSubgroupIndex = SubgroupIndexFromCoord(rootSubgroupCoord);
        if (rootSubgroupCoord == grid_SubgroupCoord)
            depth[1] = MinQuad(shuffle);

        subgroupBarrier();
        depth[1] = subgroupShuffle(depth[1], rootSubgroupIndex);
    }

    {
        const int coordDivisor = 4;
        const int offset = coordDivisor / 2;
        vec4 shuffle = vec4(
            subgroupShuffle(depth[1], SubgroupIndexFromOffset(ivec2(0,      offset))),
            subgroupShuffle(depth[1], SubgroupIndexFromOffset(ivec2(offset, offset))),
            subgroupShuffle(depth[1], SubgroupIndexFromOffset(ivec2(offset, 0))),
            depth[1]);

        ivec2 rootSubgroupCoord = ivec2(0, 0); // ivec2(grid_SubgroupCoord / coordDivisor) * coordDivisor;
        if (rootSubgroupCoord == grid_SubgroupCoord)
            sharedDepth2[grid_LocalSubgroupIndex] = MinQuad(shuffle);

        barrier();
        depth[2] = sharedDepth2[grid_LocalSubgroupIndex];
    }

    const int depth2IDDivisor = 1;
    const int depth3IDDivisor = 2;
    const int depth4IDDivisor = 4;

    const int depth2SharedSquareSize = 8; // WORKGROUP_SQUARE_SIZE;
    const int depth3SharedSquareSize = 4; // depth2SharedSquareSize / 2;
    const int depth4SharedSquareSize = 2; // depth3SharedSquareSize / 2;

    const ivec2 depth2SharedID = grid_LocalSubgroupID / depth2IDDivisor;
    const ivec2 depth3SharedID = grid_LocalSubgroupID / depth3IDDivisor;
    const ivec2 depth4SharedID = grid_LocalSubgroupID / depth4IDDivisor;

    const uint depth3SharedIndex = IndexFromID(depth3SharedID, depth3SharedSquareSize);
    const uint depth4SharedIndex = IndexFromID(depth4SharedID, depth4SharedSquareSize);

    /* prior. sharedDepth2
      0  1  2  3  4  5  6  7
    0 00 01 02 03 04 05 06 07
    1 08 09 10 11 12 13 14 15
    2 16 17 18 19 20 21 22 23
    3 24 25 26 27 28 29 30 31
    4 32 33 34 35 36 37 38 39
    5 40 41 42 43 44 45 46 47
    6 48 49 50 51 52 53 54 55
    7 56 57 58 59 60 61 62 63
    */;
    {
        ivec2 depth2RootLocalID = depth3SharedID * depth3IDDivisor;
        if (grid_SubgroupIndex == 0 && grid_LocalSubgroupID == depth2RootLocalID) {
            uint shuffle0 = IndexFromID(depth2SharedID + ivec2(0, 1), depth2SharedSquareSize);
            uint shuffle1 = IndexFromID(depth2SharedID + ivec2(1, 1), depth2SharedSquareSize);
            uint shuffle2 = IndexFromID(depth2SharedID + ivec2(1, 0), depth2SharedSquareSize);
            vec4 shuffle = vec4(
                sharedDepth2[shuffle0],
                sharedDepth2[shuffle1],
                sharedDepth2[shuffle2],
                depth[2]);
            sharedDepth3[depth3SharedIndex] = MinQuad(shuffle);
        }

        barrier();
        depth[3] = sharedDepth3[depth3SharedIndex];
    }

    /* prior. sharedDepth3
      0  1  2  3
    0 00 01 02 03
    1 04 05 06 07
    2 08 09 10 11
    3 12 13 14 15
    */
    {
        ivec2 depth3RootLocalID = depth4SharedID * depth4IDDivisor;
        if (grid_SubgroupIndex == 0 && grid_LocalSubgroupID == depth3RootLocalID) {
            uint shuffle0 = IndexFromID(depth3SharedID + ivec2(0, 1), depth3SharedSquareSize);
            uint shuffle1 = IndexFromID(depth3SharedID + ivec2(1, 1), depth3SharedSquareSize);
            uint shuffle2 = IndexFromID(depth3SharedID + ivec2(1, 0), depth3SharedSquareSize);
            vec4 shuffle = vec4(
                sharedDepth3[shuffle0],
                sharedDepth3[shuffle1],
                sharedDepth3[shuffle2],
                depth[3]);
            sharedDepth4[depth4SharedIndex] = MinQuad(shuffle);
        }

        barrier();
        depth[4] = sharedDepth4[depth4SharedIndex];
    }

    {
        /* prior. sharedDepth4
          0  1
        0 00 01
        1 02 03
        */
        ivec2 depth4RootLocalID = ivec2(0, 0); // sharedID * coordDivisor;
        if (grid_SubgroupIndex == 0 && grid_LocalSubgroupID == depth4RootLocalID) {
            uint shuffle0 = 2; // IndexFromID(depth4SharedID + ivec2(0, 1), depth4SharedSquareSize);
            uint shuffle1 = 3; // IndexFromID(depth4SharedID + ivec2(1, 1), depth4SharedSquareSize);
            uint shuffle2 = 1; // IndexFromID(depth4SharedID + ivec2(1, 0), depth4SharedSquareSize);
            vec4 shuffle = vec4(
                sharedDepth4[shuffle0],
                sharedDepth4[shuffle1],
                sharedDepth4[shuffle2],
                depth[4]);
            sharedDepth5 = MinQuad(shuffle);
        }

        barrier();
        depth[5] = sharedDepth5;
    }

    float finalDepth =
            depth[0] > 0 ? depth[0] :
            depth[1] > 0 ? depth[1] :
            depth[2] > 0 ? depth[2] :
            depth[3] > 0 ? depth[3] :
            depth[4] > 0 ? depth[4] :
            depth[5];
    imageStore(dstGbuffer, grid_GlobalCoord, vec4(finalDepth));
}