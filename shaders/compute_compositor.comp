#version 450
#extension GL_EXT_debug_printf : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
#extension GL_KHR_shader_subgroup_ballot : require

#include "global_binding.glsl"
#include "binding_node.glsl"

#include "common_util.glsl"
#include "math.glsl"
#include "subgroup_grid.glsl"
#include "depth_reproject.glsl"

layout (local_size_x = SUBGROUP_COUNT, local_size_y = WORKGROUP_SUBGROUP_COUNT, local_size_z = 1) in;

layout (set = 2, binding = 0, r32ui) uniform uimage2D outputAtomic;
layout (set = 2, binding = 1, rgba8) uniform image2D outputColor;

// probably want to do this where I find initial  nodeOriginWorldPos and nodeOriginWorldDirection with project higher level depth mip
//void mainAveragedExtrude()
//{
//    const ivec2 iScreenSize = globalUBO.screenSize;
//    const vec2 screenSize = vec2(iScreenSize);
//    const ivec2 iScreenCoord = ivec2(gl_GlobalInvocationID.xy);
//    const vec2 screenCoord = vec2(iScreenCoord);
//    const vec2 screenUV = UVFromCoord(screenCoord, screenSize);
//    const bool topTriangle =  gl_LocalInvocationID.y < gl_LocalInvocationID.x;
//
//    if (gl_LocalInvocationIndex == 0) {
//        const ivec2 iAveragedScreenSize = iScreenSize / LOCAL_SIZE;
//        const vec2 averagedScreenSize = vec2(iAveragedScreenSize);
//
//        const int averagedOffsetCount = 4;
//        const ivec2 averagedOffsets[averagedOffsetCount] = { { 0, 0 }, { 1, 1 }, { 1, 0 }, { 0, 1 } };
//        vec3 averagedWorldPos[averagedOffsetCount];
//        int validCount = 0;
//        for (int i = 0; i < averagedOffsetCount; ++i) {
//            const ivec2 averagedScreenCoord = ivec2(gl_WorkGroupID.xy) + averagedOffsets[i];
//            const uint averagedAtomicData = imageLoad(outputAveragedAtomic, averagedScreenCoord).r;
//            const float averagedGlobalNDCZ = UnpackFloat32FromUint32(averagedAtomicData);
//            const vec2 averagedScreenUV = UVFromCoord(averagedScreenCoord, averagedScreenSize);
//            const vec2 averagedScreenNDC = NDCFromUV(averagedScreenUV);
//            const vec4 averagedGlobalClipPos = ClipPosFromNDC(averagedScreenNDC, averagedGlobalNDCZ);
//            averagedWorldPos[i] = WorldPosFromGlobalClipPos(averagedGlobalClipPos);
//            validCount += int(averagedGlobalNDCZ > 0);
//        }
//
//        const vec3 xDiff = averagedWorldPos[1] - averagedWorldPos[0];
//        const vec3 yDiffTopTri = averagedWorldPos[0] - averagedWorldPos[2];
//        const vec3 yDiffBottomTri = averagedWorldPos[3] - averagedWorldPos[0];
//
//        sharedNodeOrigin.inValid = validCount != averagedOffsetCount;
//        sharedNodeOrigin.worldPos = averagedWorldPos[0];
//        sharedNodeOrigin.topTriWorldDir = normalize(cross(xDiff, yDiffTopTri));
//        sharedNodeOrigin.bottomTriWorldDir = normalize(cross(xDiff, yDiffBottomTri));
//    }
//
//    barrier();
//
//    // can't discern if this subgroupBroadcastFirst actually speeds things up vs reading shared mem directly
//    const bool inValid = subgroupBroadcastFirst(sharedNodeOrigin.inValid);
//    if (inValid) {
//        return;
//    }
//    nodeOrigin.worldPos = subgroupBroadcastFirst(sharedNodeOrigin.worldPos);
//    const vec3 topWorldDir = subgroupBroadcastFirst(sharedNodeOrigin.topTriWorldDir);
//    const vec3 bottomWorldDir = subgroupBroadcastFirst(sharedNodeOrigin.bottomTriWorldDir);
//    nodeOrigin.worldDir = topTriangle ? topWorldDir : bottomWorldDir;
//
//    //    nodeOrigin.worldPos = vec3(0, 0, 0);
//    //    nodeOrigin.worldDir = vec3(0, 0, -1);
//
//    // source pixel
//    vec3 intersectNodeNDC;
//    vec3 depthProjectedGlobalNDC;
//    if (!NodeIntersect(screenUV, intersectNodeNDC, depthProjectedGlobalNDC)) {
//        return;
//    }
//    const vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
//
//    const vec2 depthProjectedGlobalUV = UVFromNDC(depthProjectedGlobalNDC);
//    const vec3 color = texture(nodeColor, intersectNodeUV).xyz;
//    const uint packedData = packFloatAnd565Color(depthProjectedGlobalNDC.z, color);
////    const vec2 depthProjectedGlobalCoord = round(depthProjectedGlobalUV * screenSize);
//    const vec2 depthProjectGlobalCoord = depthProjectedGlobalUV * screenSize;
//    const ivec2 depthProjectGlobalCoordCeil = ivec2(ceil(depthProjectGlobalCoord));
//    const ivec2 depthProjectGlobalCoordFloor = ivec2(floor(depthProjectGlobalCoord));
//
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordCeil), packedData);
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordCeil.x, depthProjectGlobalCoordFloor.y), packedData);
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordFloor.x, depthProjectGlobalCoordCeil.y), packedData);
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordFloor), packedData);
//
//    // Stepback -- TODO may be better to just double sample, no you can write two pixels faster in one thread than two threads
//    //    const vec3 intersectGlobalNDC = GlobalNDCFromNodeNDC(intersectNodeNDC);
//    //    const vec2 intersectGlobalUV = UVFromNDC(intersectGlobalNDC);
//    //    // do the stepback in NDC to get a new Z value too
//    //    const vec2 stepBackDir = depthProjectedGlobalUV - intersectGlobalUV;
//    //    const vec2 normalizedStepBackDir = XYCoordNormalizedDir(stepBackDir);
//    //    const ivec2 stepBackCoord = ivec2(round(depthProjectedGlobalCoord + normalizedStepBackDir));
//    //    // need to figure how much z to subtract on this
//    //    imageAtomicMax(outputAtomic, ivec2(depthProjectedGlobalCoord), packedData);
//}

bool WriteDebugCoord(ivec2 debugCoord, ivec2 screenCoord){
    vec2 diff = screenCoord - debugCoord;

    if (dot(diff, diff) < 30){
        imageAtomicMax(outputAtomic, grid_GlobalInvocationQuadCoord, 1);
        imageStore(outputColor, grid_GlobalInvocationQuadCoord, vec4(1,1,0,1));
        return true;
    }

    return false;
}

void WriteDebugUV(vec2 debugUV, ivec2 screenCoord){
    ivec2 debugCoord = CoordFromUV(debugUV, globalUBO.screenSize);
    WriteDebugCoord(debugCoord, screenCoord);
}

void WriteDebugNDC(vec3 ndc, ivec2 screenCoord){
    vec2 uv = UVFromNDC(ndc);
    WriteDebugUV(uv, screenCoord);
}

void WriteDebugWorldPos(vec3 debugWorldPos, ivec2 screenCoord){
    vec4 clipPos = GlobalClipPosFromWorldPos(debugWorldPos);
    vec3 ndc = NDCFromClipPos(clipPos);
    vec2 uv = UVFromNDC(ndc);
    WriteDebugUV(uv, screenCoord);
}

bool WriteDebugLine(ivec2 P1, ivec2 P2, ivec2 screenCoord) {
    vec2 d = P2 - P1;
    vec2 Q = vec2(screenCoord);
    float crossProductZ = d.x * (Q.y - P1.y) - d.y * (Q.x - P1.x);

    float dotProduct = dot(Q - P1, d);
    float squaredSegmentLength = dot(d, d);
    bool isWithinSegment = dotProduct >= 0.0 && dotProduct <= squaredSegmentLength;

    if (WriteDebugCoord(ivec2(P1), screenCoord))
        return true;

    if (abs(crossProductZ) < 100 && isWithinSegment){
        imageAtomicMax(outputAtomic, grid_GlobalInvocationQuadCoord, 1);
        imageStore(outputColor, grid_GlobalInvocationQuadCoord, vec4(0,1,1,1));
        return true;
    }

    return false;
}

void StoreDebug(){
    imageAtomicMax(outputAtomic, grid_GlobalInvocationQuadCoord, 1);
    imageStore(outputColor, grid_GlobalInvocationQuadCoord, vec4(0,1,0,1));
}

void main()
{
    ivec2 outputSize = imageSize(outputColor);
    InitializeSubgroupGridInfo(outputSize);

    mat4 nodeViewProj    = nodeState[push.nodeHandle].viewProj;
    mat4 nodeInvView     = nodeState[push.nodeHandle].invView;
    mat4 nodeInvProj     = nodeState[push.nodeHandle].invProj;
    mat4 nodeInvViewProj = nodeState[push.nodeHandle].invViewProj;
    mat4 nodeModel       = nodeState[push.nodeHandle].model;
    vec2 nodeSwapSize    = nodeState[push.nodeHandle].framebufferSize;
    vec2 nodeULUV        = nodeState[push.nodeHandle].ulUV;
    vec2 nodeLRUV        = nodeState[push.nodeHandle].lrUV;

    vec2 nodeOriginNDC = vec2(0,0);
    vec3 nodeOriginWorldPos = vec3(0,0,0);
    vec3 nodeOriginWorldDir = -WorldRayDirFromNDC(nodeOriginNDC, nodeInvProj, nodeInvView);
    // move intersection plane to back of volume
    nodeOriginWorldPos -= nodeOriginWorldDir * 0.5;

    vec2 globalUV = vec2(grid_GlobalInvocationQuadCoord) / vec2(outputSize);
    vec2 globalNDC = NDCFromUV(globalUV);
    vec4 globalClipPos = ClipPosFromNDC(globalNDC, DEPTH_NEAR);
    vec3 globalWorldPos = WorldPosFromGlobalClipPos(globalClipPos);
    vec3 globalWorldDir = WorldRayDirFromGlobalNDC(globalNDC);

    // We can assume this will hit because the if check above will retun if the node framebuffer is not in the global framebuffer
    vec3  intersectWorldPos = IntersectPlane(globalWorldPos, globalWorldDir, nodeOriginWorldPos, nodeOriginWorldDir);
    vec4  intersectNodeClipPos = ClipPosFromWorldPos(nodeViewProj, intersectWorldPos);
    vec3  intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    vec2  intersectNodeUV = UVFromNDC(intersectNodeNDC);
    ivec2 intersectNodeCoord = CoordFromUVRound(intersectNodeUV, outputSize);

    if (any(lessThan(intersectNodeUV, nodeULUV)) || any(greaterThan(intersectNodeUV, nodeLRUV))) {
        return;
    }

    // We don't want to linear sample because then you get float pixels between objects a great depth variation
    float nodeDepthSample = texelFetch(nodeGBuffer[push.nodeHandle], intersectNodeCoord, 0).r;

    vec4  nodeProjClipPos = ClipPosFromNDC(intersectNodeNDC.xy, nodeDepthSample);
    vec3  projWorldPos = WorldPosFromClipPos(nodeInvViewProj, nodeProjClipPos);
    vec4  globProjClipPos = GlobalClipPosFromWorldPos(projWorldPos);
    vec3  globProjNDC = NDCFromClipPos(globProjClipPos);
    float globProjDepth = globProjNDC.z;
    vec2  globProjUV = UVFromNDC(globProjNDC);
    ivec2 globProjCoord = CoordFromUVRound(globProjUV, outputSize);

    if (!(globProjDepth > DEPTH_FAR))
        return;

    vec4  nodeColorSample = texelFetch(nodeColor[push.nodeHandle], intersectNodeCoord, 0);
    float finalDepth = nodeColorSample.a > 0 ? globProjDepth : 0;

    // I am going to want to pack depth with an ID of the node eventually then use that id to sample the color
    uint nodePackedDepth = PackDepth32(finalDepth);
    uint prevNodePackedDepth = imageAtomicMax(outputAtomic, globProjCoord, nodePackedDepth);

    if (nodePackedDepth >= prevNodePackedDepth) {
        // We don't want to linear sample because then pixels at the edge of an object get blended with black background
        imageStore(outputColor, globProjCoord, nodeColorSample);
    }
}
