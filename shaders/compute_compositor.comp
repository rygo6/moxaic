#version 450
//#extension GL_EXT_debug_printf : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require

#include "global_binding.glsl"
#include "node_binding.glsl"

#include "common_util.glsl"
#include "math.glsl"
#include "subgroup_grid.glsl"

layout (local_size_x = SUBGROUP_CAPACITY, local_size_y = WORKGROUP_SUBGROUP_COUNT, local_size_z = 1) in;

//layout (set = 1, binding = 5, r32ui) uniform readonly uimage2D outputAveragedAtomic;
layout (set = 2, binding = 0, r32ui) uniform uimage2D outputAtomic;
layout (set = 2, binding = 1, rgba8) uniform image2D outputColor;

//void mainAveragedExtrude()
//{
//    const ivec2 iScreenSize = globalUBO.screenSize;
//    const vec2 screenSize = vec2(iScreenSize);
//    const ivec2 iScreenCoord = ivec2(gl_GlobalInvocationID.xy);
//    const vec2 screenCoord = vec2(iScreenCoord);
//    const vec2 screenUV = UVFromCoord(screenCoord, screenSize);
//    const bool topTriangle =  gl_LocalInvocationID.y < gl_LocalInvocationID.x;
//
//    if (gl_LocalInvocationIndex == 0) {
//        const ivec2 iAveragedScreenSize = iScreenSize / LOCAL_SIZE;
//        const vec2 averagedScreenSize = vec2(iAveragedScreenSize);
//
//        const int averagedOffsetCount = 4;
//        const ivec2 averagedOffsets[averagedOffsetCount] = { { 0, 0 }, { 1, 1 }, { 1, 0 }, { 0, 1 } };
//        vec3 averagedWorldPos[averagedOffsetCount];
//        int validCount = 0;
//        for (int i = 0; i < averagedOffsetCount; ++i) {
//            const ivec2 averagedScreenCoord = ivec2(gl_WorkGroupID.xy) + averagedOffsets[i];
//            const uint averagedAtomicData = imageLoad(outputAveragedAtomic, averagedScreenCoord).r;
//            const float averagedGlobalNDCZ = UnpackFloat32FromUint32(averagedAtomicData);
//            const vec2 averagedScreenUV = UVFromCoord(averagedScreenCoord, averagedScreenSize);
//            const vec2 averagedScreenNDC = NDCFromUV(averagedScreenUV);
//            const vec4 averagedGlobalClipPos = ClipPosFromNDC(averagedScreenNDC, averagedGlobalNDCZ);
//            averagedWorldPos[i] = WorldPosFromGlobalClipPos(averagedGlobalClipPos);
//            validCount += int(averagedGlobalNDCZ > 0);
//        }
//
//        const vec3 xDiff = averagedWorldPos[1] - averagedWorldPos[0];
//        const vec3 yDiffTopTri = averagedWorldPos[0] - averagedWorldPos[2];
//        const vec3 yDiffBottomTri = averagedWorldPos[3] - averagedWorldPos[0];
//
//        sharedNodeOrigin.inValid = validCount != averagedOffsetCount;
//        sharedNodeOrigin.worldPos = averagedWorldPos[0];
//        sharedNodeOrigin.topTriWorldDir = normalize(cross(xDiff, yDiffTopTri));
//        sharedNodeOrigin.bottomTriWorldDir = normalize(cross(xDiff, yDiffBottomTri));
//    }
//
//    barrier();
//
//    // can't discern if this subgroupBroadcastFirst actually speeds things up vs reading shared mem directly
//    const bool inValid = subgroupBroadcastFirst(sharedNodeOrigin.inValid);
//    if (inValid) {
//        return;
//    }
//    nodeOrigin.worldPos = subgroupBroadcastFirst(sharedNodeOrigin.worldPos);
//    const vec3 topWorldDir = subgroupBroadcastFirst(sharedNodeOrigin.topTriWorldDir);
//    const vec3 bottomWorldDir = subgroupBroadcastFirst(sharedNodeOrigin.bottomTriWorldDir);
//    nodeOrigin.worldDir = topTriangle ? topWorldDir : bottomWorldDir;
//
//    //    nodeOrigin.worldPos = vec3(0, 0, 0);
//    //    nodeOrigin.worldDir = vec3(0, 0, -1);
//
//    // source pixel
//    vec3 intersectNodeNDC;
//    vec3 depthProjectedGlobalNDC;
//    if (!NodeIntersect(screenUV, intersectNodeNDC, depthProjectedGlobalNDC)) {
//        return;
//    }
//    const vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
//
//    const vec2 depthProjectedGlobalUV = UVFromNDC(depthProjectedGlobalNDC);
//    const vec3 color = texture(nodeColor, intersectNodeUV).xyz;
//    const uint packedData = packFloatAnd565Color(depthProjectedGlobalNDC.z, color);
////    const vec2 depthProjectedGlobalCoord = round(depthProjectedGlobalUV * screenSize);
//    const vec2 depthProjectGlobalCoord = depthProjectedGlobalUV * screenSize;
//    const ivec2 depthProjectGlobalCoordCeil = ivec2(ceil(depthProjectGlobalCoord));
//    const ivec2 depthProjectGlobalCoordFloor = ivec2(floor(depthProjectGlobalCoord));
//
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordCeil), packedData);
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordCeil.x, depthProjectGlobalCoordFloor.y), packedData);
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordFloor.x, depthProjectGlobalCoordCeil.y), packedData);
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordFloor), packedData);
//
//    // Stepback -- TODO may be better to just double sample, no you can write two pixels faster in one thread than two threads
//    //    const vec3 intersectGlobalNDC = GlobalNDCFromNodeNDC(intersectNodeNDC);
//    //    const vec2 intersectGlobalUV = UVFromNDC(intersectGlobalNDC);
//    //    // do the stepback in NDC to get a new Z value too
//    //    const vec2 stepBackDir = depthProjectedGlobalUV - intersectGlobalUV;
//    //    const vec2 normalizedStepBackDir = XYCoordNormalizedDir(stepBackDir);
//    //    const ivec2 stepBackCoord = ivec2(round(depthProjectedGlobalCoord + normalizedStepBackDir));
//    //    // need to figure how much z to subtract on this
//    //    imageAtomicMax(outputAtomic, ivec2(depthProjectedGlobalCoord), packedData);
//}

const uint pack565ColorMask = 0x0000FFFFu;
const uint pack565DepthMask = 0xFFFF0000u;
const uint clearCurrentDepthFlagMask = 0x7FFFFFFFu;

uint PackDepth(bool current, float normalizedDepth) {
    normalizedDepth = clamp(normalizedDepth, 0.0, 1.0);

    // Scale to use 31 bits (leaving the MSB for our flag)
    // Maximum value will be 2^31 - 1 = 2147483647
    uint packedValue = uint(normalizedDepth * 2147483647.0);

    // Set the MSB based on the flag (bit 31)
    packedValue = current ? packedValue | 0x80000000u : packedValue; // Set MSB to 1

    return packedValue;
}
void UnpackDepth(uint packedDepth, out float normalizedDepth, out bool current) {
    current = (packedDepth & 0x80000000u) != 0u;

    // Extract the value bits (clearing the flag bit)
    uint valueBits = packedDepth & 0x7FFFFFFFu;

    // Convert back to normalized float
    normalizedDepth = float(valueBits) / 2147483647.0;
}
bool UnpackDepthCurrentFlag(uint packedDepth) {
    return (packedDepth & 0x80000000u) != 0u;
}
uint SetDepthFlag(uint value) {
    return value | 0x80000000u;
}
uint ClearDepthFlag(uint value) {
    return value & 0x7FFFFFFFu;
}

uint packFloatAnd565Color(float normalizedDepth, vec3 color) {
    uint packedValue = uint(normalizedDepth * 65535.0);

    uint r = uint(color.r * 31.0);
    uint g = uint(color.g * 63.0);
    uint b = uint(color.b * 31.0);
    uint packedColor = (r << 11) | (g << 5) | b;

    return (packedValue << 16) | packedColor;
}

float Unpack565DepthFromUint(uint packed) {
    return packed >> 16;
}

vec3 Unpack565ColorFromUint(uint packed) {
    uint colorData = packed & 0xFFFFu;

    uint r = (colorData >> 11) & 0x1Fu;
    uint g = (colorData >> 5) & 0x3Fu;
    uint b = colorData & 0x1Fu;

    vec3 color;
    color.r = float(r) / 31.0;
    color.g = float(g) / 63.0;
    color.b = float(b) / 31.0;

    return color;
}

vec2 IntersectNodeUV(vec3 nodeOriginWorldPos, vec3 nodeOriginWorldDirection, vec2 globalUV)
{
    vec2 globalNDC = NDCFromUV(globalUV);
    vec4 globalClipPos = ClipPosFromNDC(globalNDC);
    vec3 worldPos = WorldPosFromGlobalClipPos(globalClipPos);
    vec3 worldRay = WorldRayDirFromGlobalNDC(globalNDC);
    vec3 intersectWorldPos;
    bool intersected = intersectRayPlane(worldPos, worldRay, nodeOriginWorldPos, nodeOriginWorldDirection, intersectWorldPos);
    vec4 intersectGlobalClipPos = GlobalClipPosFromWorldPos(intersectWorldPos);
    vec3 intersectGlobalNDC = NDCFromClipPos(intersectGlobalClipPos);
    vec4 intersectNodeClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    vec3 intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
    return intersectNodeUV;
}

vec3 IntersectNodeNDC(vec3 nodeOriginWorldPos, vec3 nodeOriginWorldDirection, vec2 globalUV)
{
    vec2 globalNDC = NDCFromUV(globalUV);
    vec4 globalClipPos = ClipPosFromNDC(globalNDC);
    vec3 worldPos = WorldPosFromGlobalClipPos(globalClipPos);
    vec3 worldRay = WorldRayDirFromGlobalNDC(globalNDC);
    vec3 intersectWorldPos;
    bool intersected = intersectRayPlane(worldPos, worldRay, nodeOriginWorldPos, nodeOriginWorldDirection, intersectWorldPos);
    vec4 intersectGlobalClipPos = GlobalClipPosFromWorldPos(intersectWorldPos);
    vec3 intersectGlobalNDC = NDCFromClipPos(intersectGlobalClipPos);
    vec4 intersectNodeClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    vec3 intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    return intersectNodeNDC;
}

void main()
{
    const ivec2 outputSize = imageSize(outputColor);
    const ivec2 outputHalfSize = outputSize / 2;

    const uint globalWorkgroupIndex = gl_WorkGroupID.y;
    const ivec2 globalWorkgroupId = GlobalWorkgroupID(globalWorkgroupIndex, outputHalfSize);

    const uint localSubgroupIndex = gl_GlobalInvocationID.y % WORKGROUP_SUBGROUP_COUNT;
    const ivec2 localWorkgroupID = LocalWorkgroupID(localSubgroupIndex);

    const uint globalSubgroupIndex = gl_GlobalInvocationID.y;
    const uint subgroupInvocIndex = gl_SubgroupInvocationID;
    const ivec2 subgroupID = SubgroupID(subgroupInvocIndex);

    const ivec2 coord = (subgroupID + localWorkgroupID + globalWorkgroupId) * 2;

    const vec3 nodeOriginWorldPos = vec3(0, 0, 0);
    const vec3 nodeOriginWorldDirection = vec3(0, 0, -1);

    { // Projected Coords Processing

        for (int i = 0; i < 4; ++i) {
            ivec2 globCoord = coord + gatherOffsets[i];
            vec2 globUV = vec2(globCoord) / vec2(outputSize);
            vec3 intersectNodeNDC = IntersectNodeNDC(nodeOriginWorldPos, nodeOriginWorldDirection, globUV);
            vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);

            // this should be constrained the rect where it is in the framebuffer
//            if (intersectNodeUVs[i].x < 0 || intersectNodeUVs[i].x > 1 || intersectNodeUVs[i].y < 0 || intersectNodeUVs[i].y > 1)
//                return;

            // vec2 intersectNodeCoord = CoordFromUVRound(intersectNodeUV, outputSize);
            // use imageload I could also write dpeth into color?
            // it is also true that technically this would be more accurate linear sampled

            float nodeDepthSample = texture(nodeGBuffer, intersectNodeUV).r;
            vec3 nodeProjNDC = vec3(intersectNodeNDC.xy, nodeDepthSample);
            vec4 nodeProjClipPos = ClipPosFromNDC(nodeProjNDC);
            vec3 projWorldPos = WorldPosFromNodeClipPos(nodeProjClipPos);
            vec4 globProjClipPos = GlobalClipPosFromWorldPos(projWorldPos);
            vec3 globProjNDC = NDCFromClipPos(globProjClipPos);
            float globProjDepth = globProjNDC.z;

            if (!(globProjDepth > 0)) continue;

            vec2 globProjUV = UVFromNDC(globProjNDC);
            ivec2 globProjCoord = CoordFromUVRound(globProjUV, outputSize);

            uint nodePackedDepth = PackDepth(true, globProjDepth);
            uint prevNodePackedDepth = imageAtomicMax(outputAtomic, globProjCoord, nodePackedDepth);

            if (nodePackedDepth > prevNodePackedDepth){
                vec4 nodeColorSample = texture(nodeColor, intersectNodeUV);
                imageStore(outputColor, globProjCoord, nodeColorSample);
            }
        }

    }

}
