#version 450
//#extension GL_EXT_debug_printf : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_ballot : require

#include "global_binding.glsl"
#include "node_binding.glsl"

#include "common_util.glsl"
#include "math.glsl"
#include "subgroup_grid.glsl"

layout (local_size_x = SUBGROUP_CAPACITY, local_size_y = WORKGROUP_SUBGROUP_COUNT, local_size_z = 1) in;

//layout (set = 1, binding = 5, r32ui) uniform readonly uimage2D outputAveragedAtomic;
layout (set = 2, binding = 0, r32ui) uniform uimage2D outputAtomic;
layout (set = 2, binding = 1, rgba8) uniform writeonly image2D outputColor;

//void mainAveragedExtrude()
//{
//    const ivec2 iScreenSize = globalUBO.screenSize;
//    const vec2 screenSize = vec2(iScreenSize);
//    const ivec2 iScreenCoord = ivec2(gl_GlobalInvocationID.xy);
//    const vec2 screenCoord = vec2(iScreenCoord);
//    const vec2 screenUV = UVFromCoord(screenCoord, screenSize);
//    const bool topTriangle =  gl_LocalInvocationID.y < gl_LocalInvocationID.x;
//
//    if (gl_LocalInvocationIndex == 0) {
//        const ivec2 iAveragedScreenSize = iScreenSize / LOCAL_SIZE;
//        const vec2 averagedScreenSize = vec2(iAveragedScreenSize);
//
//        const int averagedOffsetCount = 4;
//        const ivec2 averagedOffsets[averagedOffsetCount] = { { 0, 0 }, { 1, 1 }, { 1, 0 }, { 0, 1 } };
//        vec3 averagedWorldPos[averagedOffsetCount];
//        int validCount = 0;
//        for (int i = 0; i < averagedOffsetCount; ++i) {
//            const ivec2 averagedScreenCoord = ivec2(gl_WorkGroupID.xy) + averagedOffsets[i];
//            const uint averagedAtomicData = imageLoad(outputAveragedAtomic, averagedScreenCoord).r;
//            const float averagedGlobalNDCZ = UnpackFloat32FromUint32(averagedAtomicData);
//            const vec2 averagedScreenUV = UVFromCoord(averagedScreenCoord, averagedScreenSize);
//            const vec2 averagedScreenNDC = NDCFromUV(averagedScreenUV);
//            const vec4 averagedGlobalClipPos = ClipPosFromNDC(averagedScreenNDC, averagedGlobalNDCZ);
//            averagedWorldPos[i] = WorldPosFromGlobalClipPos(averagedGlobalClipPos);
//            validCount += int(averagedGlobalNDCZ > 0);
//        }
//
//        const vec3 xDiff = averagedWorldPos[1] - averagedWorldPos[0];
//        const vec3 yDiffTopTri = averagedWorldPos[0] - averagedWorldPos[2];
//        const vec3 yDiffBottomTri = averagedWorldPos[3] - averagedWorldPos[0];
//
//        sharedNodeOrigin.inValid = validCount != averagedOffsetCount;
//        sharedNodeOrigin.worldPos = averagedWorldPos[0];
//        sharedNodeOrigin.topTriWorldDir = normalize(cross(xDiff, yDiffTopTri));
//        sharedNodeOrigin.bottomTriWorldDir = normalize(cross(xDiff, yDiffBottomTri));
//    }
//
//    barrier();
//
//    // can't discern if this subgroupBroadcastFirst actually speeds things up vs reading shared mem directly
//    const bool inValid = subgroupBroadcastFirst(sharedNodeOrigin.inValid);
//    if (inValid) {
//        return;
//    }
//    nodeOrigin.worldPos = subgroupBroadcastFirst(sharedNodeOrigin.worldPos);
//    const vec3 topWorldDir = subgroupBroadcastFirst(sharedNodeOrigin.topTriWorldDir);
//    const vec3 bottomWorldDir = subgroupBroadcastFirst(sharedNodeOrigin.bottomTriWorldDir);
//    nodeOrigin.worldDir = topTriangle ? topWorldDir : bottomWorldDir;
//
//    //    nodeOrigin.worldPos = vec3(0, 0, 0);
//    //    nodeOrigin.worldDir = vec3(0, 0, -1);
//
//    // source pixel
//    vec3 intersectNodeNDC;
//    vec3 depthProjectedGlobalNDC;
//    if (!NodeIntersect(screenUV, intersectNodeNDC, depthProjectedGlobalNDC)) {
//        return;
//    }
//    const vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
//
//    const vec2 depthProjectedGlobalUV = UVFromNDC(depthProjectedGlobalNDC);
//    const vec3 color = texture(nodeColor, intersectNodeUV).xyz;
//    const uint packedData = packFloatAnd565Color(depthProjectedGlobalNDC.z, color);
////    const vec2 depthProjectedGlobalCoord = round(depthProjectedGlobalUV * screenSize);
//    const vec2 depthProjectGlobalCoord = depthProjectedGlobalUV * screenSize;
//    const ivec2 depthProjectGlobalCoordCeil = ivec2(ceil(depthProjectGlobalCoord));
//    const ivec2 depthProjectGlobalCoordFloor = ivec2(floor(depthProjectGlobalCoord));
//
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordCeil), packedData);
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordCeil.x, depthProjectGlobalCoordFloor.y), packedData);
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordFloor.x, depthProjectGlobalCoordCeil.y), packedData);
//    imageAtomicMax(outputAtomic, ivec2(depthProjectGlobalCoordFloor), packedData);
//
//    // Stepback -- TODO may be better to just double sample, no you can write two pixels faster in one thread than two threads
//    //    const vec3 intersectGlobalNDC = GlobalNDCFromNodeNDC(intersectNodeNDC);
//    //    const vec2 intersectGlobalUV = UVFromNDC(intersectGlobalNDC);
//    //    // do the stepback in NDC to get a new Z value too
//    //    const vec2 stepBackDir = depthProjectedGlobalUV - intersectGlobalUV;
//    //    const vec2 normalizedStepBackDir = XYCoordNormalizedDir(stepBackDir);
//    //    const ivec2 stepBackCoord = ivec2(round(depthProjectedGlobalCoord + normalizedStepBackDir));
//    //    // need to figure how much z to subtract on this
//    //    imageAtomicMax(outputAtomic, ivec2(depthProjectedGlobalCoord), packedData);
//}

const uint pack565DepthMask = 0x0000FFFFu;

uint packFloatAnd565Color(float normalizedDepth, vec3 color) {
    uint packedValue = uint(normalizedDepth * 65535.0);

    uint r = uint(color.r * 31.0);
    uint g = uint(color.g * 63.0);
    uint b = uint(color.b * 31.0);
    uint packedColor = (r << 11) | (g << 5) | b;

    return (packedValue << 16) | packedColor;
}

vec3 Unpack565ColorFromUint(uint packed) {
    uint colorData = packed & 0xFFFFu;

    uint r = (colorData >> 11) & 0x1Fu;
    uint g = (colorData >> 5) & 0x3Fu;
    uint b = colorData & 0x1Fu;

    vec3 color;
    color.r = float(r) / 31.0;
    color.g = float(g) / 63.0;
    color.b = float(b) / 31.0;

    return color;
}

vec2 IntersectNodeUV(vec3 nodeOriginWorldPos, vec3 nodeOriginWorldDirection, vec2 globalUV)
{
    vec2 globalNDC = NDCFromUV(globalUV);
    vec4 globalClipPos = ClipPosFromNDC(globalNDC);
    vec3 worldPos = WorldPosFromGlobalClipPos(globalClipPos);
    vec3 worldRay = WorldRayDirFromGlobalNDC(globalNDC);
    vec3 intersectWorldPos;
    bool intersected = intersectRayPlane(worldPos, worldRay, nodeOriginWorldPos, nodeOriginWorldDirection, intersectWorldPos);
    vec4 intersectGlobalClipPos = GlobalClipPosFromWorldPos(intersectWorldPos);
    vec3 intersectGlobalNDC = NDCFromClipPos(intersectGlobalClipPos);
    vec4 intersectNodeClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    vec3 intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    vec2 intersectNodeUV = UVFromNDC(intersectNodeNDC);
    return intersectNodeUV;
}

vec3 IntersectNodeNDC(vec3 nodeOriginWorldPos, vec3 nodeOriginWorldDirection, vec2 globalUV)
{
    vec2 globalNDC = NDCFromUV(globalUV);
    vec4 globalClipPos = ClipPosFromNDC(globalNDC);
    vec3 worldPos = WorldPosFromGlobalClipPos(globalClipPos);
    vec3 worldRay = WorldRayDirFromGlobalNDC(globalNDC);
    vec3 intersectWorldPos;
    bool intersected = intersectRayPlane(worldPos, worldRay, nodeOriginWorldPos, nodeOriginWorldDirection, intersectWorldPos);
    vec4 intersectGlobalClipPos = GlobalClipPosFromWorldPos(intersectWorldPos);
    vec3 intersectGlobalNDC = NDCFromClipPos(intersectGlobalClipPos);
    vec4 intersectNodeClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    vec3 intersectNodeNDC = NDCFromClipPos(intersectNodeClipPos);
    return intersectNodeNDC;
}

void main()
{
    const ivec2 outputSize = imageSize(outputColor);
    const ivec2 outputHalfSize = outputSize / 2;

    const uint globalWorkgroupIndex = gl_WorkGroupID.y;
    const ivec2 globalWorkgroupId = GlobalWorkgroupID(globalWorkgroupIndex, outputHalfSize);

    const uint localSubgroupIndex = gl_GlobalInvocationID.y % WORKGROUP_SUBGROUP_COUNT;
    const ivec2 localWorkgroupID = LocalWorkgroupID(localSubgroupIndex);

    const uint globalSubgroupIndex = gl_GlobalInvocationID.y;
    const uint subgroupInvocIndex = gl_SubgroupInvocationID;
    const ivec2 subgroupID = SubgroupID(subgroupInvocIndex);

    const ivec2 coord = (subgroupID + localWorkgroupID + globalWorkgroupId) * 2;

    const vec3 nodeOriginWorldPos = vec3(0, 0, -0.5);
    const vec3 nodeOriginWorldDirection = vec3(0, 0, -1);

    ivec2 coords[4];

    for (int i = 0; i < 4; ++i) {
        coords[i] = coord + gatherOffsets[i];
        // AND out only the depth so the color can fill in gaps
        imageAtomicAnd(outputAtomic, coords[i], pack565DepthMask);
//        uint pacNodColr = imageLoad(outputAtomic, projCoords[i]).r;
//        imageStore(outputColor, coords[i], vec4(0, 0, 0, 0));
    }

    memoryBarrier();
    memoryBarrierImage();

    vec2 globQuadUV = vec2(coord + 1) / vec2(outputSize);
    vec3 globQuadNodNDC = IntersectNodeNDC(nodeOriginWorldPos, nodeOriginWorldDirection, globQuadUV);
    vec2 globQuadNodUV = UVFromNDC(globQuadNodNDC);

//    vec4 gathrDepths = textureGather(nodeGBuffer, globQuadNodUV, 0);
    vec2 uvs[4];
    vec2 nodUVs[4];
    vec3 projNDCs[4];
    ivec2 projCoords[4];

    for (int i = 0; i < 4; ++i) {
        uvs[i] = vec2(coords[i]) / vec2(outputSize);
        vec3 nodNDC = IntersectNodeNDC(nodeOriginWorldPos, nodeOriginWorldDirection, uvs[i]);
        nodUVs[i] = UVFromNDC(nodNDC);
        float depth = texture(nodeGBuffer, nodUVs[i]).r;
        vec3 nodProjNDC = vec3(nodNDC.xy, depth);
        vec4 nodProjClipPos = ClipPosFromNDC(nodProjNDC);
        vec3 ProjWrldPos = WorldPosFromNodeClipPos(nodProjClipPos);
        vec4 globProjClipPos = GlobalClipPosFromWorldPos(ProjWrldPos);
        projNDCs[i] = NDCFromClipPos(globProjClipPos);
        vec2 globProjUV = UVFromNDC(projNDCs[i]);
        projCoords[i] = CoordFromUVRound(globProjUV, outputSize);
    }

    for (int i = 0; i < 4; ++i) {
        vec4 nodColr = texture(nodeColor, nodUVs[i]);
        // I should be packing UV... then I don't even need to read color here
        uint pacNodColr = packFloatAnd565Color(projNDCs[i].z, nodColr.xyz);
        imageAtomicMax(outputAtomic, projCoords[i], pacNodColr);
    }

    memoryBarrier();

    for (int i = 0; i < 4; ++i) {
        uint pacNodColr = imageLoad(outputAtomic, projCoords[i]).r;
        vec3 nodColr = Unpack565ColorFromUint(pacNodColr);
        imageStore(outputColor, projCoords[i], vec4(nodColr, 1));
    }

//    vec2 quadCenterUV = vec2(coord0 + 1) / vec2(size);
//    vec4 gatheredDepth = textureGather(nodeGBuffer, quadCenterUV, 0);

//    for (int i = 0; i < 4; ++i) {
//
//        ivec2 offsetCoord = gatherOffsets[i] + coord;
//        vec2 offsetUv = vec2(offsetCoord) / vec2(size);
//        vec4 nodeColorSample = texture(nodeColor, offsetUv);
//        imageStore(outputColor, offsetCoord, nodeColorSample);
//    }
}
