#version 450

#include "global_binding.glsl"
#include "compute_node_binding.glsl"

#define MXC_CAMERA_MIN_Z 0.0001f

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

layout (set = 1, binding = 5, r32ui) uniform uimage2D outputAtomic;

// varying this .5 is probably solution to sperating pixels
// puling it closer makes less separation up close, probably a ratio to figure out
vec3 nodeOriginWorldPos = vec3(0, 0, .5);
const vec3 nodeOriginWorldDirection = vec3(0, 0, 1);

vec3 intersectRayPlane(vec3 rayOrigin, vec3 rayDir, vec3 planePoint, vec3 planeNormal) {
    const float facingRatio = dot(planeNormal, rayDir);
    const float t = dot(planePoint - rayOrigin, planeNormal) / facingRatio;
    return (facingRatio < 0) ? (rayOrigin + t * rayDir) : vec3(0, 0, 0);
}

vec3 WorldPosFromGlobalClipPos(vec4 clipPos)
{
    const vec4 worldPos = globalUBO.invView * globalUBO.invProj * clipPos;
    return worldPos.xyz / worldPos.w;
}

vec3 NDCRay(vec2 ndc, mat4 invProj, mat4 invView)
{
    const vec4 clipRayDir = vec4(ndc, 0, 1);
    const vec4 viewSpace = invProj * clipRayDir;
    const vec4 viewDir = vec4(viewSpace.xy, 1, 0);
    const vec3 globalWorldRayDir = normalize((invView * viewDir).xyz);
    return globalWorldRayDir;
}

vec3 GlobalNDCRay(vec2 ndc)
{
    return NDCRay(ndc, globalUBO.invProj, globalUBO.invView);
}

vec3 NodeNDCRay(vec2 ndc)
{
    return NDCRay(ndc, nodeUBO.invProj, nodeUBO.invView);
}

vec4 GlobalClipPosFromWorldPos(vec3 worldPos)
{
    return globalUBO.proj * globalUBO.view * vec4(worldPos, 1);
}

vec3 WorldPosFromNodeClipPos(vec4 clipPos)
{
    const vec4 worldPos = nodeUBO.invView * nodeUBO.invProj * clipPos;
    return worldPos.xyz / worldPos.w;
}

vec4 NodeClipPosFromWorldPos(vec3 worldPos)
{
    return nodeUBO.proj * nodeUBO.view * vec4(worldPos, 1);
}

vec3 NDCFromClipPos(vec4 clipPos)
{
    return clipPos.xyz / clipPos.w;
}

vec2 NDCFromUV(vec2 uv)
{
    return uv * 2.0 - 1.0;
}

vec2 UVFromNDC(vec3 ndc)
{
    return (ndc.xy + 1.0) * 0.5;
}

ivec2 iRound(vec2 coord)
{
    return ivec2(round(coord));
}

ivec2 CoordFromUV(vec2 uv, vec2 screenSize)
{
    return iRound(uv * screenSize);
}

vec2 uvFromCoord(ivec2 coord, vec2 screenSize)
{
    return vec2(coord) / screenSize;
}

float unlinearizeDepth(float d, mat4 projMatrix) {
    float a = projMatrix[2][2];
    float b = projMatrix[3][2];
    return (a * d + b) / d;
}

float linearizeDepth(float z, mat4 projMatrix) {
    float a = projMatrix[2][2];
    float b = projMatrix[3][2];
    return b / (z - a);
}

float linearizeDepth(float d, float zNear, float zFar)
{
    return zNear * zFar / (zFar + d * (zNear - zFar));
}

float unlinearizeDepth(float d, float near, float far) {
    return (far + near - (2.0 * near * far) / d) / (far - near);
}

float calculateNonLinearDepth(float d_mid, mat4 projMatrix) {
    float n = projMatrix[3][2] / (projMatrix[2][2] - 1.0);
    float f = projMatrix[3][2] / (projMatrix[2][2] + 1.0);

    float z_clip = (-f * n * (2.0 * d_mid)) / (d_mid * (f + n)) - (f + n) / (f - n);
    float z_ndc = (z_clip + 1.0) / 2.0;// Adjusting from [-1, 1] to [0, 1] for Vulkan NDC

    return z_ndc;
}

float calculateWForMidpoint(float near, float far) {
    float d_mid = (near + far) / 2.0f;
    float w = 2.0f * ((far + near) * d_mid - 2.0f * far * near) / (0.5f * (far - near));
    return w;
}

bool NodeIntersectUV(const vec2 uv, out vec2 nodeUV, out vec3 depthProjectedNDC)
{
    // for whatever reason sending uv through the whole projection math and back
    // ends you up with the uv inverted so do 1 - uv here so outuv lines up with start uv
    const vec2 ndc = NDCFromUV(1 - uv);

    const vec4 clipPos = vec4(ndc, 0, 1);
    const vec3 globalWorldPos = WorldPosFromGlobalClipPos(clipPos);
    const vec3 globalWorldRay = GlobalNDCRay(ndc);
    const vec3 intersectWorldPos = intersectRayPlane(globalWorldPos, globalWorldRay, nodeOriginWorldPos, nodeOriginWorldDirection);

    const vec4 nodeIntersectClipPos = NodeClipPosFromWorldPos(intersectWorldPos);
    const vec3 nodeIntersectNDC = NDCFromClipPos(nodeIntersectClipPos);
    const vec2 nodeIntersectUV = UVFromNDC(nodeIntersectNDC);
    nodeUV = nodeIntersectUV;

    const float depth = texture(nodeDepth, nodeIntersectUV).r;

    if (nodeIntersectUV.x < 0
    || nodeIntersectUV.x > 1
    || nodeIntersectUV.y < 0
    || nodeIntersectUV.y > 1
    || depth > .99
    ) {
        return false;
    }

//    const vec4 nodeQuadSurfaceClipPos = vec4(nodeIntersectNDC.xy, .001, 1);
//    const vec3 nodeQuadSurfaceWorldPos = WorldPosFromNodeClipPos(nodeQuadSurfaceClipPos);
//    const vec4 nodeQuadSurfaceProjectedClipPos = GlobalClipPosFromWorldPos(intersectWorldPos);
//    const vec3 nodeQuadSurfaceProjectedNDC = NDCFromClipPos(nodeQuadSurfaceProjectedClipPos);
//    surfaceNDC = nodeQuadSurfaceProjectedNDC;

    const vec4 nodeQuadDepthClipPos = vec4(nodeIntersectNDC.xy, depth, 1);
    const vec3 nodeQuadDepthWorldPos = WorldPosFromNodeClipPos(nodeQuadDepthClipPos);
    const vec4 nodeQuadDepthProjectedClipPos = GlobalClipPosFromWorldPos(nodeQuadDepthWorldPos);
    const vec3 nodeQuadDepthProjectedNDC = NDCFromClipPos(nodeQuadDepthProjectedClipPos);
    depthProjectedNDC = nodeQuadDepthProjectedNDC;

    return true;
}

void writeAtomicData(ivec2 coord, uint data){
    imageAtomicMin(outputAtomic, coord, data);
}

uint packFloatAndColor(float normalizedDepth, vec3 color) {
    uint packedValue = uint(normalizedDepth * 65535.0);

    uint r = uint(color.r * 31.0);
    uint g = uint(color.g * 63.0);
    uint b = uint(color.b * 31.0);
    uint packedColor = (r << 11) | (g << 5) | b;

    return (packedValue << 16) | packedColor;
}

uint packFloatAndColorR(float normalizedDepth, vec3 color) {
    uint packedValue = uint(normalizedDepth * 65535.0);

    uint r = uint(color.r * 31.0);
    uint g = uint(0 * 63.0);
    uint b = uint(0 * 31.0);
    uint packedColor = (r << 11) | (g << 5) | b;

    return (packedValue << 16) | packedColor;
}

uint packFloatAndColorG(float normalizedDepth, vec3 color) {
    uint packedValue = uint(normalizedDepth * 65535.0);

    uint r = uint(0 * 31.0);
    uint g = uint(color.g * 63.0);
    uint b = uint(0 * 31.0);
    uint packedColor = (r << 11) | (g << 5) | b;

    return (packedValue << 16) | packedColor;
}

void WriteDebugUV(vec2 debugUV){
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2 screenSize = vec2(globalUBO.width, globalUBO.height) * RESOLUTION_SCALE;
    const ivec2 debugCoord = CoordFromUV(debugUV, screenSize);
    const ivec2 diff = coord - debugCoord;
    if (dot(diff, diff) < 100){
        const uint packedData = packFloatAndColor(0, vec3(0, 1, 0));
        writeAtomicData(coord, packedData);
    }
}

float inverseLerp(float a, float b, float value) {
    return a == b ? 0 : clamp((value - a) / (b - a), a, b);
}

vec2 GlobalUVFromNodeNDC(vec3 nodeNDC){
    const vec3 worldPos = WorldPosFromNodeClipPos(vec4(nodeNDC, 1));
    const vec4 globalClipPos = GlobalClipPosFromWorldPos(worldPos.xyz);
    const vec3 globalNDC = NDCFromClipPos(globalClipPos);
    const vec2 globalUV = UVFromNDC(globalNDC);
    return globalUV;
}

float CalcNodeZPlane(){
    const vec2 frontUpperLeftGlobalUV = GlobalUVFromNodeNDC(vec3(-1, 1, -1));
    const vec2 frontLowerRightGlobalUV = GlobalUVFromNodeNDC(vec3(1, -1, -1));
    const vec2 frontDiff = frontUpperLeftGlobalUV - frontLowerRightGlobalUV;
    const float frontMag = dot(frontDiff, frontDiff);

    const vec2 backUpperLeftGlobalUV = GlobalUVFromNodeNDC(vec3(-1, 1, 1));
    const vec2 backLowerRightGlobalUV = GlobalUVFromNodeNDC(vec3(1, -1, 1));
    const vec2 backDiff = backUpperLeftGlobalUV - backLowerRightGlobalUV;
    const float backMag = dot(backDiff, backDiff);

    const float nodeZPlane = frontMag < backMag ? 0.5f : -0.5f; // do some kind of gradient in between?

    return nodeZPlane;
}

void main()
{
    nodeOriginWorldPos.z = CalcNodeZPlane();

    const ivec2 iScreenSize = ivec2(globalUBO.width, globalUBO.height) * RESOLUTION_SCALE;
    const vec2 screenSize = vec2(iScreenSize);
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2 uv = uvFromCoord(coord, screenSize);

    vec2 nodeUV;
//    vec3 surfaceNDC;
    vec3 depthProjectedNDC;
    if (!NodeIntersectUV(uv, nodeUV, depthProjectedNDC)) {
        return;
    }
//    const vec2 surfaceUV = UVFromNDC(surfaceNDC);
//    const ivec2 surfaceCoord = CoordFromUV(surfaceUV, screenSize);
    const vec2 depthProjectUV = UVFromNDC(depthProjectedNDC);
    const ivec2 depthProjectedCoord = CoordFromUV(depthProjectUV, screenSize);

    const vec4 color = texture(nodeColor, nodeUV);

    const uint packedData = packFloatAndColor(depthProjectedNDC.z, color.xyz);
    writeAtomicData(depthProjectedCoord, packedData);

    const vec2 projectionDir = depthProjectUV - uv;
    const vec2 absProjectionDir = abs(projectionDir);
    const bool walkX = absProjectionDir.x > absProjectionDir.y;
    const vec2 xNormalizedProjectionDir = projectionDir * (1.0f / absProjectionDir.x);
    const vec2 yNormalizedProjectionDir = projectionDir * (1.0f / absProjectionDir.y);
    const vec2 normalizedProjectionDir = (walkX ? xNormalizedProjectionDir : yNormalizedProjectionDir);

    // We must do the stepback in coord space to ensure it only goes back 1 pixel
    // can this be merged with the other NodeIntersetUV method?
    const ivec2 stepbackCoord = iRound(normalizedProjectionDir + vec2(coord));
    const vec2 stepbackUV = uvFromCoord(stepbackCoord, screenSize);
    vec2 stepbackNodeUV;
//    vec3 stepbackSurfaceNDC;
    vec3 stepbackProjectedNDC;
    if (!NodeIntersectUV(stepbackUV, stepbackNodeUV, stepbackProjectedNDC)) {
        return;
    }
    const vec2 stepbackProjectedUV = UVFromNDC(stepbackProjectedNDC);
    const ivec2 stepbackOutputUVCoord = CoordFromUV(stepbackProjectedUV, screenSize);
    const ivec2 stepbackCoordDiff = abs(stepbackOutputUVCoord - depthProjectedCoord);
    const int stepbackCount = clamp((walkX ? stepbackCoordDiff.x : stepbackCoordDiff.y) - 1, 0, 4);// -1 so it doesn't overlap end pixel in stepback?
    vec2 currentCoord = depthProjectedCoord;
    ivec2 roundedCoord = depthProjectedCoord;
    for (int step = 0; step < stepbackCount; ++step){
        currentCoord += normalizedProjectionDir;
        roundedCoord = iRound(currentCoord);
        writeAtomicData(roundedCoord, packedData);
    }
}
