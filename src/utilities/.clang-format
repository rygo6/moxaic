# Use the LLVM style as a starting point because Vulkan's coding style is close to C/C++ standards.
BasedOnStyle: LLVM

# IndentWidth: 4 spaces are commonly used in C/C++ projects.
IndentWidth: 4

# TabWidth: Assuming tabs are not used for indentation in Vulkan headers, but if they are, they're likely set to 4 spaces in width.
TabWidth: 4

# UseTab: Never to avoid tabs for indentation, consistent with many C/C++ coding standards.
UseTab: Never

# BraceWrapping: Adjust brace wrapping rules to match observed Vulkan styles.
BraceWrapping:
  # Functions might have the opening brace on the same line.
  AfterFunction: true
  # Other styles like classes, structs, and enums might have different rules, but adjust based on observation.
  AfterClass: false
  AfterStruct: false
  AfterEnum: false
  # Inline functions might have the opening brace on the same line.
  AfterInlineMethod: true

# PointerAlignment: It's common in C projects to align the asterisk with the variable name.
PointerAlignment: Right

# AlignConsecutiveAssignments: False, assuming Vulkan headers do not align assignments consecutively.
AlignConsecutiveAssignments: false

# AlignConsecutiveDeclarations: False, assuming Vulkan headers do not align declarations consecutively.
AlignConsecutiveDeclarations: false

# AlignTrailingComments: True to align trailing comments, which is common in C headers for documentation purposes.
AlignTrailingComments: true

# AlwaysBreakAfterReturnType: None to allow definitions and declarations to stay on one line if they fit.
AlwaysBreakAfterReturnType: None

# AlwaysBreakTemplateDeclarations: No, assuming that Vulkan style keeps template declarations on one line if possible.
AlwaysBreakTemplateDeclarations: No

# SpaceBeforeParens: Control spaces before parentheses in various contexts.
SpaceBeforeParens: Control
  # Assuming Vulkan headers do not add space before function call parentheses.
  AfterControlStatement: Never
  # But might have space before function declaration parentheses.
  AfterFunctionDeclarationName: true

# SpaceAfterCStyleCast: False, assuming no space after C-style casts, common in C codebases.
SpaceAfterCStyleCast: false
